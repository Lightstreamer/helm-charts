{{/*
Copyright (C) 2025 Lightstreamer Srl

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "lightstreamer.fullname" . }}-init-scripts
  labels:
    {{- include "lightstreamer.labels" . | nindent 4 }}
data:
  {{- /*
  Makes the Kafka Connector deployment available in the Lightstreamer container.
  */}}
  {{- if ((.Values.connectors).kafkaConnector).enabled }}
  copy-kafka-connector.sh: |
    #!/bin/sh
    {{- with ((.Values.connectors).kafkaConnector).provisioning }}
    KAFKA_CONNECTOR_DEPLOYMENT=/lightstreamer/deployed_adapters/{{ include "lightstreamer.kafka-connector.name" . }}
      {{- if .fromPathInImage }}
    # The connector is already available in the image, so just create a soft 
    # link. 
    ln -s {{ .fromPathInImage }} /lightstreamer/deployed_adapters/{{ include "lightstreamer.kafka-connector.name" . }}
      {{- else }}
    # The connector has already been deployed to the expected path in the by
    # the "kafka-connector-deployer" init container. Do nothing.
      {{- end }}
    {{- end }}
    # In all cases, override the configuration files with the ones rendered by 
    # Helm and provided in the ConfigMap.
    # The rendered schema files, if present, are already mounted from the 
    # related ConfigMaps at the "schema" folder under the Kafka Connector.
    cp /connectors-source-conf/kafka/adapters.xml ${KAFKA_CONNECTOR_DEPLOYMENT}/adapters.xml
    cp /connectors-source-conf/kafka/log4j.properties ${KAFKA_CONNECTOR_DEPLOYMENT}/log4j.properties
  {{- end }}

  launch.sh: |
    #!/bin/bash
    set -e
    # The working dir is /lightstreamer/bin/unix-like as per the settings of the Docker image
    mkdir -p /lightstreamer/deployed_adapters/
    {{- if ((.Values.connectors).kafkaConnector).enabled }}
    /lightstreamer/bin/init-scripts/copy-kafka-connector.sh
    {{- end}}

    {{- range $adapterName, $adapter := .Values.adapters }}
      {{- if $adapter.enabled }}
      {{- $adapterFolderName := $adapterName | kebabcase }}
    mkdir -p /lightstreamer/deployed_adapters/{{ $adapterFolderName }}

    echo "Copy the adapters.xml file for the '{{ $adapterName }}' Adapter Set"
    cp /adapters-source-conf/{{ $adapterFolderName }}/adapters.xml /lightstreamer/deployed_adapters/{{ $adapterFolderName }}/adapters.xml

        {{- if ($adapter.provisioning).fromPathInImage}}
    mkdir -p /tmp/adapters-repo
    ln -s {{ $adapter.provisioning.fromPathInImage }} /tmp/adapters-repo/{{ $adapterFolderName}}
        {{- end }}

        {{- /*
        List of paths to copy from the provisioning source. Here we specify
        "." to include the common "lib" and "classes" folders of the Adapter Set
        */ -}}
        {{- $paths := list "." }}
        {{- /* Add the installDir of the Metadata Adapter, if any */ -}}
        {{- with $adapter.metadataProvider.inProcessMetadataAdapter }}
          {{- if .installDir }}
            {{- $paths = append $paths .installDir }}
          {{- end}}
        {{- end }}

        {{- /* Add the installDir of the Data Adapters, if any */ -}}
        {{- range $dataProviderName, $dataProvider := $adapter.dataProviders }}
          {{- if $dataProvider.enabled }}
            {{- with $dataProvider.inProcessDataAdapter }}
              {{- if .installDir }}
                {{- $paths = append $paths .installDir }}
              {{- end}}
            {{- end }}
          {{- end }}
        {{- end }}

        {{- $paths := $paths | uniq }}
    path_to_copy={{ join " " $paths | quote }}
    echo "Copying the resources for the '{{ $adapterName }}' Adapter Set"
        {{- $rootSourcePathSuffix := "" }}
        {{- if (($adapter.provisioning).fromVolume).path }}
          {{- $rootSourcePathSuffix = printf "/%s" $adapter.provisioning.fromVolume.path }}
        {{- end }}
    root_source_path="/tmp/adapters-repo/{{ $adapterFolderName }}{{ $rootSourcePathSuffix }}"
    
    for path in $path_to_copy; do
      destination_path="/lightstreamer/deployed_adapters/{{ $adapterFolderName }}/$path"
      [[ "$s" !=  "." ]] && mkdir -p $destination_path
      for dir in "lib" "classes"; do
        full_source_path="${root_source_path}/$path/$dir"
        full_destination_path="${destination_path}/$dir"
        [[ -d "${full_source_path}" ]] && cp -r $full_source_path $full_destination_path
      done
    done
      {{- end }}
    {{- end }}

    {{/* The following commands are executed before the Lightstreamer Server is started */}}
    {{- range .Values.deployment.preCommands }}
    {{ . }}
    {{- end}}

    if [ -n "${LS_HIBERNATE_SYSTEM_PROPERTIES}" ]; then
       JAVA_OPTS="${JAVA_OPTS} ${LS_HIBERNATE_SYSTEM_PROPERTIES}"
    fi
    ./LS.sh run
