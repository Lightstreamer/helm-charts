{{/*
Copyright (C) 2025 Lightstreamer Srl

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "lightstreamer.fullname" . }}-init-scripts
  labels:
    {{- include "lightstreamer.labels" . | nindent 4 }}
data:
  {{- /*
  Makes the Kafka Connector deployment available in the Lightstreamer container.
  */}}
  {{- if ((.Values.connectors).kafkaConnector).enabled }}
  setup-kafka-connector.sh: |
    #!/bin/bash
    set -euo pipefail

    {{- with ((.Values.connectors).kafkaConnector).provisioning }}
    # Initialize deployment path
    KAFKA_CONNECTOR_DEPLOYMENT={{ include "lightstreamer.kafka-connector.deployment" . }}
      {{- if .fromPathInImage }}
    # The connector is already available in the image, so just create a soft
    # link.
    ln -s {{ .fromPathInImage }} ${KAFKA_CONNECTOR_DEPLOYMENT}
      {{- else }}
    # The connector has already been deployed to the expected path in the by
    # the "kafka-connector-deployer" init container. Do nothing.
      {{- end }}
    {{- end }}
    # In all cases, override the configuration files with the ones rendered by
    # Helm and provided in the ConfigMap.
    # The rendered schema files, if present, are already mounted from the
    # related ConfigMaps at the "schema" folder under the Kafka Connector.
    cp /connectors-source-conf/kafka/adapters.xml ${KAFKA_CONNECTOR_DEPLOYMENT}/adapters.xml
    cp /connectors-source-conf/kafka/log4j.properties ${KAFKA_CONNECTOR_DEPLOYMENT}/log4j.properties
  {{- end }}

  {{- /*
  Setup the Adapters for the Lightstreamer Server.
  */}}
  setup-adapters.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Copy adapter resources from source to destination
    function copy_resources {
      local source_path="$1"
      local dest_path="$2"
      local subdirs="$3"

      # Validate source path exists
      if [ ! -d "$source_path" ]; then
        echo "Source path does not exist: $source_path"
        return 1
      fi

      for path in $subdirs; do
        local destination_path="${dest_path}/$path"
        #[[ "$path" !=  "." ]] && 

        # Create destination directory
        mkdir -p $destination_path

        # Copy lib and classes directories if they exist
        for dir in "lib" "classes"; do
          local full_source_path="${source_path}/$path/$dir"
          local full_destination_path="${destination_path}/$dir"

          if [ -d "${full_source_path}" ]; then
            cp -r "$full_source_path" "$full_destination_path"
          else
            echo "Directory not found, skipping: $full_source_path"
          fi
        done
      done
    }

    {{- range $adapterName, $adapterSet := .Values.adapters }}
      {{- if $adapterSet.enabled }}
        {{- $adapterFolderName := $adapterName | kebabcase }}
    target_adapter_path="{{ include "lightstreamer.adapters.fullAdaptersDir" . }}/{{ $adapterFolderName }}"
    mkdir -p "$target_adapter_path"

    echo "Copy the adapters.xml file for the '{{ $adapterName }}' Adapter Set"
    cp /adapters-source-conf/{{ $adapterFolderName }}/adapters.xml $target_adapter_path/adapters.xml

        {{- if ($adapterSet.provisioning).fromPathInImage}}
          {{- /* 
            Here we cannot use /tmp/adapters-repo because it is used as prefix for other volume 
            mount paths that may be already in use. So let's use a different path.
          */}}
    root_source_path="/tmp/adapters-repo-from-image"
    mkdir -p "$root_source_path"
    ln -s {{ $adapterSet.provisioning.fromPathInImage }} $root_source_path/{{ $adapterFolderName }}
    root_source_path="/tmp/adapters-repo-from-image/{{ $adapterFolderName }}"
        {{- else }}
          {{- $rootSourcePathSuffix := "" }}
          {{- if (($adapterSet.provisioning).fromVolume).path }}
            {{- $rootSourcePathSuffix = printf "/%s" $adapterSet.provisioning.fromVolume.path }}
          {{- end }}
    root_source_path="/tmp/adapters-repo/{{ $adapterFolderName }}{{ $rootSourcePathSuffix }}"        
        {{- end }}

        {{- /*
        List of paths containing the "lib" and "classes" folders to copy from 
        the Adapter Set directory located in the provisioning source. By 
        default, include "." to capture even the top-level "lib" and "classes"
        folders.
        */ -}}
        {{- $paths := list "." }}
        {{- $configMapRefs := dict }}
        {{- /* Add the installDir of the Metadata Adapter, if any */ -}}
        {{- with $adapterSet.metadataProvider.inProcessMetadataAdapter }}
          {{- if and .installDir (ne .installDir ".") }}
            {{- $paths = append $paths .installDir }}
          {{- end }}
          {{- if .configMapRef }}
            {{- $key := .installDir | default "." }}
            {{- $sourceConfigMapPaths := list (printf "/adapters-source-conf/%s/%s-config" $adapterFolderName .configMapRef) }}
            {{- $_ := set $configMapRefs $key $sourceConfigMapPaths }}
          {{- end }}
        {{- end }}

        {{- /* Add the installDir of the Data Adapters, if any */ -}}
        {{- range $dataProviderName, $dataProvider := $adapterSet.dataProviders }}
          {{- if $dataProvider.enabled }}
            {{- with $dataProvider.inProcessDataAdapter }}
              {{- if and .installDir (ne .installDir ".") }}
                {{- $paths = append $paths .installDir }}
              {{- end }}
              {{- if .configMapRef }}
                {{- $key := .installDir | default "." }}
                {{- $sourceConfigMapPaths := get $configMapRefs $key | default list }}
                {{- $sourceConfigMapPaths = append $sourceConfigMapPaths (printf "/adapters-source-conf/%s/%s-config" $adapterFolderName .configMapRef) }}
                {{- $_ := set $configMapRefs $key ($sourceConfigMapPaths | uniq) }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}

        {{- $paths := $paths | uniq }}
    echo "Copying the resources for the '{{ $adapterName }}' Adapter Set"
    paths_to_copy={{ join " " $paths | quote }}
    
    if ! copy_resources "${root_source_path}" "${target_adapter_path}" "${paths_to_copy}" ; then
      echo "Failed to copy resources for the '{{ $adapterName }}' Adapter Set"
      exit 1
    fi
        
        {{- range $installDir, $sourceConfigMapPaths := $configMapRefs }}
          {{- range $sourceConfigMapPaths }}
    cp {{ . }}/* {{ include "lightstreamer.adapters.fullAdaptersDir" . }}/{{ $adapterFolderName }}/{{ $installDir }}
          {{- end }}
        {{- end }}  
      {{- end }}
    {{- end }}
  
  launch.sh: |
    #!/bin/bash
    set -eo pipefail

    # The working dir is /lightstreamer/bin/unix-like as per the settings of the Docker image
    mkdir -p {{ include "lightstreamer.adapters.fullAdaptersDir" . }}

    {{- if ((.Values.connectors).kafkaConnector).enabled }}
    # Setup the Kafka Connector
    /lightstreamer/bin/init-scripts/setup-kafka-connector.sh
    {{- end }}

    # Setup the Adapters
    /lightstreamer/bin/init-scripts/setup-adapters.sh

    {{- if .Values.deployment.preCommands }}
    # Launch the pre-commands
      {{- range .Values.deployment.preCommands }}
    {{ . }}
      {{- end }}
    {{- end }}

    if [ -n "${LS_HIBERNATE_SYSTEM_PROPERTIES}" ]; then
       JAVA_OPTS="${JAVA_OPTS} ${LS_HIBERNATE_SYSTEM_PROPERTIES}"
    fi
    ./LS.sh run
