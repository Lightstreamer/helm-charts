apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lightstreamer.fullname" . }}
  {{- with .Values.deployment.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "lightstreamer.labels" . | nindent 4 }}
    {{- with .Values.deployment.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.deployment.replicas }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "lightstreamer.selectorLabels" . | nindent 6 }}
      {{- with .Values.deployment.additionalSelectors }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  {{- with .Values.deployment.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.deployment.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "lightstreamer.labels" . | nindent 8 }}
        {{- with .Values.deployment.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "lightstreamer.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.deployment.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.deployment.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.lifecycle }}
          lifecycle:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
          {{- range $key, $value := .Values.servers }}
          {{- if $value.enabled }}
            - name: {{ $key }}
              containerPort: {{ $value.port }}
              protocol: TCP
          {{- end }}
          {{- end }}
          {{- with .Values.management.jmx.rmiConnector.port}}
            - name: jmx-port
              containerPort: {{ .value }}
              protocol: TCP
          {{- end }}
          {{- with .Values.management.jmx.rmiConnector.dataPort}}
            - name: jmxDataPort
              containerPort: {{ .value }}
              protocol: TCP
          {{- end }}
          {{- with .Values.deployment.probes }}
          livenessProbe:
            {{- if ((.liveness).healthCheck).enabled }}
              {{- with .liveness.healthCheck }}
            httpGet:
              path: /lightstreamer/healthcheck
                {{- $serverRef := required "probes.liveness.healthCheck.serverRef must be set" .serverRef }}
                {{- $server := required (printf "servers.%s not defined" $serverRef) (get $.Values.servers $serverRef) }}
              port: {{ $serverRef }}
              scheme: {{ $server.enableHttps | default false | ternary "HTTPS" "HTTP" }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            failureThreshold:  {{ .failureThreshold }}
            timeoutSeconds: {{ .timeoutSeconds }}
            terminationGracePeriodSeconds: {{ .terminationGracePeriodSeconds }}
              {{- end }}  
            {{- else }}
                {{- toYaml (default dict (.liveness).default) | nindent 12 }}
            {{- end }}
          readinessProbe:
            {{- if ((.readiness).healthCheck).enabled }}
              {{- with .readiness.healthCheck }}
            httpGet:
              path: /lightstreamer/healthcheck
                {{- $serverRef := required "probes.readiness.healthCheck.serverRef must be set" .serverRef }}
                {{- $server := required (printf "servers.%s not defined" $serverRef) (get $.Values.servers $serverRef) }}
              port: {{ $serverRef }}
              scheme: {{ $server.enableHttps | default false | ternary "HTTPS" "HTTP" }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            failureThreshold:  {{ .failureThreshold }}
            timeoutSeconds: {{ .timeoutSeconds }}
              {{- end }}  
            {{- else }}
                {{- toYaml (default dict (.readiness).default) | nindent 12 }}
            {{- end }}
          startupProbe:
            {{- if ((.startup).healthCheck).enabled }}
              {{- with .startup.healthCheck }}
            httpGet:
              path: /lightstreamer/healthcheck
                {{- $serverRef := required "probes.startup.healthCheck.serverRef must be set" .serverRef }}
                {{- $server := required (printf "servers.%s not defined" $serverRef) (get $.Values.servers $serverRef) }}
              port: {{ $serverRef }}
              scheme: {{ $server.enableHttps | default false | ternary "HTTPS" "HTTP" }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            failureThreshold:  {{ .failureThreshold }}
            timeoutSeconds: {{ .timeoutSeconds }}
              {{- end }}  
            {{- else }}
                {{- toYaml (default dict (.startup).default) | nindent 12 }}
            {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.deployment.resources | nindent 12 }}
          env:
          {{- range $key, $value := .Values.keyStores }}
            - name: LS_KEYSTORE_{{ $key | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ required (printf "keyStores.%s.keystorePasswordSecretRef.name must be set" $key) ($value.keystorePasswordSecretRef).name }}
                  key: {{ required (printf "keyStores.%s.keystorePasswordSecretRef.key must be set" $key) ($value.keystorePasswordSecretRef).key }}
          {{- end }}
          {{- if and (ne .Values.license.enterprise.licenseType "DEMO") (eq .Values.license.enterprise.licenseValidation "ONLINE") }}
            {{- with .Values.license.enterprise.onlinePasswordSecretRef }}
            - name: LS_ENTERPRISE_LICENSE_{{ .key | upper | replace "-" "_" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .name }}
                  key: {{ .key }}
            {{- end }}
          {{- end }}
          {{- range $value := .Values.management.jmx.rmiConnector.credentialSecrets }}
            - name: LS_CREDENTIAL_{{ $value | upper | replace "-" "_" }}_USER
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: user
            - name: LS_CREDENTIAL_{{ $value | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: password
          {{- end }}
          {{- with .Values.deployment.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: ligthstreamer-configuration
              mountPath: /lightstreamer/conf
          {{- if and (ne .Values.license.enterprise.licenseType "DEMO") (eq .Values.license.enterprise.licenseValidation "FILE") }}
            {{- with .Values.license.enterprise.filePathSecretRef }}
            - name: lightstreamer-enterprise-license
              mountPath: /lightstreamer/conf/enterprise-license/
            {{- end }}
          {{- end }}
          {{- with .Values.errorPageRef }}
            - name: ligthstreamer-error-page
              mountPath: /lightstreamer/conf/error-page
          {{- end }}
          {{- range $key, $value := .Values.keyStores }}
            - name: keystore-{{ $key | lower }}
              mountPath: /lightstreamer/conf/keystores/{{ $key }}
          {{- end }}
          {{- if ((.Values.connectors).kafkaConnector).enabled }}
            - name: kafka-connector-storage
              mountPath: /lightstreamer/adapters/lightstreamer-kafka-connector/install
            - name: kafka-connector-configuration
              mountPath: /lightstreamer/adapters/lightstreamer-kafka-connector/adapters.xml
              subPath: adapters.xml
          {{- end }}
          {{- with .Values.deployment.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.deployment.hostname }}
      hostname: {{ . }}
      {{- end }}          
      {{- with .Values.deployment.hostNetwork }}
      hostNetwork: {{ . }}
      {{- end }}
      {{- with .Values.deployment.dnsPolicy }}
      dnsPolicy: {{ . }}
      {{- end }}
      initContainers:
        {{- with .Values.deployment.initContainers }} 
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if ((.Values.connectors).kafkaConnector).enabled }}
        - name: kafka-connector-downloader
          image: alpine
          command: ['sh', '/scripts/kafka-connector-downloader.sh']
          volumeMounts:
          - name: kafka-connector-deploy-scripts
            mountPath: /scripts
          - name: kafka-connector-storage
            mountPath: /tmp
        {{- end }}
      volumes:
        - name: ligthstreamer-configuration
          configMap:
            name: {{ include "lightstreamer.fullname" . }}-conf
      {{- with .Values.errorPageRef }}
        - name: lightstreamer-error-page
          configMap:
            name: {{ .name }}
      {{- end }}
      {{- range $key, $value := .Values.keyStores }}
        - name: keystore-{{ $key | lower }}
          secret:
            secretName: {{ required (printf "keystores.%s.keystoreFileSecretRef.name must be set" $key) (($value.keystoreFileSecretRef).name) }}
      {{- end }}
      {{- if and (ne .Values.license.enterprise.licenseType "DEMO") (eq .Values.license.enterprise.licenseValidation "FILE") }}
        {{- with required "license.enterprirse.filePathSecretRef  must be set " .Values.license.enterprise.filePathSecretRef }}
        - name: lightstreamer-enterprise-license
          secret:
            secretName: {{ required "license.enterprirse.filePathSecretRef.name must be set" .name }}
        {{- end }}
      {{- end }}
      {{- if ((.Values.connectors).kafkaConnector).enabled }}
        - name: kafka-connector-storage
          emptyDir: {}
        - name: kafka-connector-deploy-scripts
          configMap:
            name: {{ include "lightstreamer.kafka-connector.fullname" . }}-init-conf
        - name: kafka-connector-configuration
          configMap:
            name: {{ include "lightstreamer.kafka-connector.fullname" . }}-conf
      {{- end }}
      {{- with .Values.deployment.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.topologySpreadConstraints}}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ int .Values.deployment.terminationGracePeriodSeconds }}
      {{- end }}
