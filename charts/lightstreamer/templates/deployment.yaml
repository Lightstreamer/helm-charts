{{/*
Copyright (C) 2025 Lightstreamer Srl

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lightstreamer.fullname" . }}
  {{- with .Values.deployment.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "lightstreamer.labels" . | nindent 4 }}
    {{- with .Values.deployment.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.deployment.replicas }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "lightstreamer.selectorLabels" . | nindent 6 }}
      {{- with .Values.deployment.additionalSelectors }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  {{- with .Values.deployment.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.deployment.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "lightstreamer.labels" . | nindent 8 }}
        {{- with .Values.deployment.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "lightstreamer.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.deployment.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.deployment.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/lightstreamer/bin/init-scripts/launch.sh"]
          {{- if .Values.management.jmx  }}
          lifecycle:
            preStop:
              exec:
                command: ["/lightstreamer/bin/unix-like/LS.sh", "stop"]
          {{- end }}
          ports:
          {{- /* START CONTAINER PORTS */ -}}
          {{- range $serverKey, $server := .Values.servers }}
            {{- if $server.enabled }}
            - name: {{ include "lightstreamer.configuration.serverPortName" $serverKey }}
              containerPort: {{ $server.port }}
              protocol: TCP
            {{- end }}
          {{- end }}
            {{- /* START RMI CONNECTOR PORTS */ -}}
          {{- with (.Values.management.jmx).rmiConnector }}
            - name: jmx-port
              containerPort: {{ .port.value }}
              protocol: TCP
            {{- with .dataPort }}
            - name: jmx-data-port
              containerPort: {{ .value }}
              protocol: TCP
            {{- end }}
          {{- end }}
            {{- /* END RMI CONNECTOR PORTS */ -}}
            {{- /* START JMXMP CONNECTOR PORT */ -}}
          {{- with (.Values.management.jmx).jmxmpConnector }}
            {{- if .enabled }}
            - name: jmxmp-port
              containerPort: {{ .port }}
              protocol: TCP
              {{- end }}
          {{- end }}
            {{- /* END JMXMP CONNECTOR PORT */ -}}
          {{- /* START PROXY ADAPTER PORTS */ -}}
          {{- $metaCounter := 0}}
          {{- range $adapterName, $adapterSet := .Values.adapters }}
            {{- if $adapterSet.enabled }}
              {{- with $adapterSet.metadataProvider.proxyMetadataAdapter }}
                {{-  if not .remoteHost }}
                  {{- $metaCounter = add1 $metaCounter }}
                  {{- $key := printf "proxy-meta-%d" $metaCounter }}
            - name: {{ $key }}
              containerPort: {{ .requestReplyPort }}
              protocol: TCP
                {{- end }}
              {{- end }}
              {{- $dataCounter := 0}}
              {{- range $dataProviderName, $dataProvider := $adapterSet.dataProviders }}
                {{- if $dataProvider.enabled }}
                  {{- with $dataProvider.proxyDataAdapter }}
                    {{-  if not .remoteHost }}
                      {{- $dataCounter = add1 $dataCounter }}
                      {{- $key := printf "proxy-data-%d" $dataCounter }}
            - name: {{ $key }}
              containerPort: {{ .requestReplyPort }}
              protocol: TCP
                    {{- end}}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- end }}
            {{- /* END PROXY ADAPTER PORTS */ -}}
          {{- /* END CONTAINER PORTS */ -}}
          {{- include "lightstreamer.deployment.all-probes" . | indent 10 }}
          resources:
            {{- toYaml .Values.deployment.resources | nindent 12 }}
          env:
          {{- /* START ENV VARIABLES FOR LIGHTSTREAMER KEYSTORES */ -}}
          {{- range $key, $value := .Values.keystores }}
            {{- if $value }}
            - name: LS_KEYSTORE_{{ $key | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ required (printf "keystores.%s.keystorePasswordSecretRef.name must be set" $key) ($value.keystorePasswordSecretRef).name }}
                  key: {{ required (printf "keystores.%s.keystorePasswordSecretRef.key must be set" $key) ($value.keystorePasswordSecretRef).key }}
              {{- if $value.keyPasswordSecretRef }}
            - name: LS_KEYSTORE_{{ $key | upper | replace "-" "_" }}_KEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ required (printf "keystores.%s.keyPasswordSecretRef.name must be set" $key) ($value.keyPasswordSecretRef).name }}
                  key: {{ required (printf "keystores.%s.keyPasswordSecretRef.key must be set" $key) ($value.keyPasswordSecretRef).key }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- /* END ENV VARIABLES FOR LIGHTSTREAMER KEYSTORES */ -}}
          {{- /* START ENV VARIABLES FOR LIGHTSTREAMER LICENSE */ -}}
          {{- if and (ne ((.Values.license).enterprise).licenseType "DEMO") (eq ((.Values.license).enterprise).licenseValidation "ONLINE") }}
            {{- with required "license.enterprise.onlinePasswordSecretRef must be set" .Values.license.enterprise.onlinePasswordSecretRef }}
            - name: LS_ENTERPRISE_LICENSE_ONLINE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ required "license.enterprise.onlinePasswordSecretRef.name must be set" .name }}
                  key: {{ required "license.enterprise.onlinePasswordSecretRef.key must be set" .key }}
            {{- end }}
          {{- end }}
          {{- $allSecrets := list }}
          {{- range $key, $httpProxy := concat (.Values.license).proxy.socksProxies (.Values.license).proxy.httpProxies }}
            {{- if $httpProxy.host }}
              {{- $allSecrets = append $allSecrets ($httpProxy.credentialsSecretRef) }}
            {{- end }}
          {{- end }}
          {{- $allSecrets = $allSecrets | uniq }}
          {{- range $allSecrets }}
            - name: LS_PROXY_{{ . | upper | replace "-" "_" }}_USER
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: user
            - name: LS_PROXY_{{ . | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: password
          {{- end}}
          {{- /* END VARIABLES FOR LIGHTSTREAMER LICENSE */ -}}
          {{- /* START ENV VARIABLES FOR LIGHTSTREAMER MANAGEMENT */ -}}
          {{- with (.Values.management.jmx).rmiConnector }}
            {{- if not .enablePublicAccess }}
              {{- range .credentialsSecrets }}
            - name: LS_RMI_CREDENTIAL_{{ . | upper | replace "-" "_" }}_USER
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: user
            - name: LS_RMI_CREDENTIAL_{{ . | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: password
              {{- end }}
            {{- end }}
          {{- end }}
          {{- with (.Values.management).dashboard }}
            {{- if not .enablePublicAccess }}
              {{- range .credentials }}
              {{- if .secretRef}}
            - name: LS_DASHBOARD_CREDENTIAL_{{ .secretRef | upper | replace "-" "_" }}_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .secretRef }}
                  key: user
            - name: LS_DASHBOARD_CREDENTIAL_{{ .secretRef | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .secretRef }}
                  key: password
              {{- end }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- /* END ENV VARIABLES FOR LIGHTSTREAMER MANAGEMENT */ -}}
          {{- /* START ENV VARIABLES FOR MPN */ -}}
          {{- if (.Values.mpn).enabled }}
            {{/* START ENV VARIABLES FOR HIBERNATE CONNECTION */}}
            - name: LS_HIBERNATE_CONNECTION_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mpn.hibernateConfig.connection.credentialsSecretRef }}
                  key: user
            - name: LS_HIBERNATE_CONNECTION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mpn.hibernateConfig.connection.credentialsSecretRef }}
                  key: password
            - name: LS_HIBERNATE_SYSTEM_PROPERTIES
              value: "-Dls_hibernate_connection_username=$(LS_HIBERNATE_CONNECTION_USERNAME) -Dls_hibernate_connection_password=$(LS_HIBERNATE_CONNECTION_PASSWORD)"
            {{/* END ENV VARIABLES FOR HIBERNATE CONNECTION */}}
            {{- /* START ENV VARIABLES FOR APPLE KEYSTORES */ -}}
            {{- range $keyStoreName, $keyStore := (.Values.mpn.appleNotifierConfig).keystores }}
              {{- if $keyStore }}
            - name: LS_MPN_APPLE_KEYSTORE_{{ $keyStoreName | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ required (printf "mpn.appleNotifierConfig.keystores.%s.keystorePasswordSecretRef.name must be set" $keyStoreName) ($keyStore.keystorePasswordSecretRef).name }}
                  key: {{ required (printf "mpn.appleNotifierConfig.keystores.%s.keystorePasswordSecretRef.key must be set" $keyStoreName) ($keyStore.keystorePasswordSecretRef).key }}
              {{- end }}
            {{- end }}
            {{- /* END ENV VARIABLES FOR APPLE KEYSTORES */ -}}
          {{- end }}
          {{- /* END ENV VARIABLES FOR MPN */ -}}
          {{- /* START ENV VARIABLES FOR THE ADAPTERS CONFIGURATION */ -}}
          {{- $authSecretRefs := list }}
          {{- range $adapter := .Values.adapters }}
            {{- if $adapter.enabled }}
              {{- if (((.metadataProvider).proxyMetadataAdapter).authentication).enabled }}
                {{- $authSecretRefs = concat $authSecretRefs .metadataProvider.proxyMetadataAdapter.authentication.credentialsSecrets }}
              {{- end }}
              {{- range $dataProvider := .dataProviders}}
                {{- if ($dataProvider).enabled }}
                  {{- if ((.proxyDataAdapter).authentication).enabled }}
                    {{- $authSecretRefs = concat $authSecretRefs .proxyDataAdapter.authentication.credentialsSecrets }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- $authSecretRefs := $authSecretRefs | uniq }}
          {{- range $authSecretRefs }}
            - name: LS_PROXY_ADAPTER_CREDENTIAL_{{ . | upper | replace "-" "_" }}_USER
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: user
            - name: LS_PROXY_ADAPTER_CREDENTIAL_{{ . | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: password      
          {{- end }}
          {{- /* END ENV VARIABLES FOR THE ADAPTERS CONFIGURATION */ -}}
          {{- /* START ENV VARIABLES FOR THE KAFKA CONNECTOR */ -}}
          {{- if ((.Values.connectors).kafkaConnector).enabled }}
            {{- /* AUTHENTICATION */ -}}
            {{- $authSecretRefs := list }}
            {{- range $key, $connection := $.Values.connectors.kafkaConnector.connections }}
              {{- if and (($connection.authentication).enabled) (ne ($connection.authentication).mechanism "GSSAPI") }}
                {{- $authSecretRefs = append $authSecretRefs ($connection.authentication.credentialsSecretRef) }}
              {{- end }}
            {{- end }}
            {{- $authSecretRefs := $authSecretRefs | uniq }}
            {{- range $authSecretRefs }}
            - name: LS_KAFKA_PLAIN_AUTH_{{ . | upper | replace "-" "_" }}_USER
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: user
            - name: LS_KAFKA_PLAIN_AUTH_{{ . | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: password
            {{- end }} {{- /* end of range $authSecretRefs */ -}}
            {{- /* END AUTHENTICATION */ -}}
            {{- /* SCHEMA REGISTRY */ -}}
            {{- range $key, $schemaRegistry := $.Values.connectors.kafkaConnector.schemaRegistry }}
              {{- if ($schemaRegistry.basicAuthentication).enabled }}
                {{- with $schemaRegistry.basicAuthentication }}
            - name: LS_KAFKA_SCHEMA_REGISTRY_{{ $key | upper | replace "-" "_" }}_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .credentialsSecretRef }}
                  key: user
            - name: LS_KAFKA_SCHEMA_REGISTRY_{{ $key | upper | replace "-" "_" }}_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .credentialsSecretRef }}
                  key: password
                {{- end }}
              {{- end }} {{- /* end of $schemaRegistry.basicAuthentication.enabled */ -}}
            {{- end}} {{- /* end of range $schemaRegistry */ -}}
            {{- /* END SCHEMA REGISTRY */ -}}
          {{- end }}
          {{- /* END ENV VARIABLES FOR THE KAFKA CONNECTOR */ -}}
          {{- with .Values.deployment.extraEnv }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: lightstreamer-init-scripts
              mountPath: /lightstreamer/bin/init-scripts
            - name: lightstreamer-configuration
              mountPath: /lightstreamer/conf
          {{- /* START VOLUME MOUNTS FOR MPN */ -}}
          {{- if (.Values.mpn).enabled }}
            - name: lightstreamer-mpn-conf
              mountPath: /lightstreamer/conf/mpn
            - name: lightstreamer-mpn-apple-conf
              mountPath: /lightstreamer/conf/mpn/apple
            - name: lightstreamer-mpn-google-conf
              mountPath: /lightstreamer/conf/mpn/google
            {{- /* START VOLUME MOUNTS FOR APPLE KEYSTORES */ -}}
            {{- range $keyStoreName, $keyStore := (.Values.mpn.appleNotifierConfig).keystores }}
              {{- if $keyStore }}
            - name: lightstreamer-mpn-keystore-{{ $keyStoreName | lower | replace "_" "-" }}
              mountPath: /lightstreamer/conf/mpn/apple/keystores/{{ $keyStoreName }}
              {{- end }}
            {{- end }}
            {{- /* END VOLUME MOUNTS FOR APPLE KEYSTORES */ -}}
            {{- /* START VOLUME MOUNTS FOR APPLE PUSH PACKAGES */ -}}
            {{- range $appName, $app := ((.Values.mpn).appleNotifierConfig).apps }}
              {{- if and $app.enabled (hasPrefix "web." $app.id )}}
            - name: lightstreamer-mpn-push-package-{{ $appName | lower | replace "_" "-" }}
              mountPath: /lightstreamer/conf/mpn/apple/{{ $appName }}
              {{- end }}
            {{- end }}
            {{- /* END VOLUME MOUNTS FOR APPLE PUSH PACKAGES */ -}}
            {{- /* START VOLUME MOUNTS FOR GOOGLE SERVICE JSON FILES */ -}}
            {{- range $appName, $app := ((.Values.mpn).googleNotifierConfig).apps }}
              {{- if $app.enabled }}
            - name: lightstreamer-mpn-service-json-{{ $appName | lower | replace "_" "-" }}
              mountPath: /lightstreamer/conf/mpn/google/{{ $appName }}
              {{- end }}
            {{- end }}
            {{- /* END VOLUME MOUNTS FOR GOOGLE SERVICE JSON FILES */ -}}
          {{- end }}
          {{- /* END VOLUME MOUNTS FOR MPN */ -}}
          {{- /* START VOLUME MOUNTS FOR DAILY ROLLING FILE APPENDER */ -}}
          {{- $volumeRefs := list }}
          {{- range $key, $appender := (.Values.logging).appenders }}
            {{- if and ($appender.type | eq "DailyRollingFile") ($appender.volumeRef) }}
              {{- $volumeRefs = append $volumeRefs $appender.volumeRef }}
            {{- end }}
          {{- end }}
          {{- $volumeRefs = $volumeRefs | uniq }}
          {{- range $volumeRefs }}
            - name: {{ . }}
              mountPath: /lightstreamer/logs/{{ . }}
          {{- end }}
          {{- /* END VOLUME MOUNTS FOR DAILY ROLLING FILE APPENDER */ -}}
          {{- /* START VOLUME MOUNTS FOR LICENSE FILE */ -}}
          {{- if and (ne ((.Values.license).enterprise).licenseType "DEMO") (eq ((.Values.license).enterprise).licenseValidation "FILE") }}
            {{- with .Values.license.enterprise.filePathSecretRef }}
            - name: lightstreamer-enterprise-license
              mountPath: /lightstreamer/conf/enterprise-license/
            {{- end }}
          {{- end }}
          {{- /* END VOLUME MOUNTS FOR LICENSE FILE */ -}}
          {{- /* START VOLUME MOUNTS FOR PAC FILES */ -}}
          {{- $configMaps := list }}
          {{- range $index, $filePath := (((.Values.license).proxy).pacFiles).filePaths }}
            {{- $configMaps = append $configMaps (required (printf "license.proxy.pacFiles.filePaths[%d].name must be set" $index) $filePath.name) }}
          {{- end }}
          {{- $configMaps := $configMaps | uniq }}
          {{- range $configMaps }}
            - name: lightstreamer-enterprise-proxy-pac-{{ . }}
              mountPath: /lightstreamer/conf/proxy-pac-files/{{ . }}
          {{- end }}
          {{- /* END VOLUME MOUNTS FOR PAC FILES */ -}}
          {{- with .Values.errorPageRef }}
            - name: lightstreamer-error-page
              mountPath: /lightstreamer/conf/error-page
          {{- end }}
          {{- /* START VOLUME MOUNTS FOR KEYSTORES */ -}}
          {{- range $key, $value := .Values.keystores }}
            {{- if $value }}
            - name: keystore-{{ $key | lower }}
              mountPath: /lightstreamer/conf/keystores/{{ $key }}
            {{- end }}
          {{- end }}
          {{- /* END VOLUME MOUNTS FOR KEYSTORES */ -}}
          {{- /* START VOLUME MOUNTS FOR KAFKA CONNECTOR */ -}}
          {{- with .Values.connectors.kafkaConnector }}
            {{- if .enabled }}
            - name: kafka-connector-configuration
              mountPath: /connectors-source-conf/kafka
              {{- $kafkaConnector := include "lightstreamer.kafka-connector.name" . }}
              {{- if not .provisioning.fromPathInImage }}
            - name: kafka-connector-deployment
              mountPath: /lightstreamer/deployed_adapters/{{ $kafkaConnector }}
              subPath: {{ $kafkaConnector }}
              {{- end }}
              {{- range $key, $value := .localSchemaFiles }}
                {{- if $value}}
            - name: kafka-connector-schema-files-{{ $key | lower }}
              mountPath: /lightstreamer/deployed_adapters/{{ $kafkaConnector }}/schemas/{{ $key }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- /* END VOLUME MOUNTS FOR KAFKA CONNECTOR */ -}}
          {{- /* START VOLUME MOUNTS FOR ADAPTERS */}}
          {{- range $adapterName, $adapterSet := .Values.adapters }}
            {{- if $adapterSet.enabled }}
            - name: lightstreamer-{{ $adapterName | kebabcase }}-adapter-conf
              mountPath: /adapters-source-conf/{{ $adapterName | kebabcase}}
              {{- with ($adapterSet.provisioning).fromVolume }}
            - name: {{ required (printf "adapters.%s.provisioning.fromVolume.name must be set" $adapterName) .name }}
              mountPath: /tmp/adapters-repo/{{ $adapterName | kebabcase}}
              {{- end }}
            {{- end}}
          {{- end }}
          {{- /* END VOLUME MOUNTS FOR ADAPTERS */ -}}
          {{- with .Values.deployment.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- with .Values.deployment.extraContainers }}
          {{- toYaml . | nindent 8 }}
        {{- end}}
      {{- with .Values.deployment.hostname }}
      hostname: {{ . }}
      {{- end }}
      {{- with .Values.deployment.hostNetwork }}
      hostNetwork: {{ . }}
      {{- end }}
      {{- with .Values.deployment.dnsPolicy }}
      dnsPolicy: {{ . }}
      {{- end }}
      {{- with .Values.deployment.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      initContainers:
        {{- if ((.Values.connectors).kafkaConnector).enabled }}
        {{- with .Values.connectors.kafkaConnector.provisioning }}
          {{- if not .fromPathInImage }}
        - name: kafka-connector-deployer
          image: alpine
          command: ['sh', '/bin/kafka-connector-deployer.sh']
          volumeMounts:
            - name: kafka-connector-deployer-script
              mountPath: /bin/kafka-connector-deployer.sh
              subPath: kafka-connector-deployer.sh
              {{- if or .fromGitHubRelease .fromUrl }}
            - name: kafka-connector-source-storage
              {{- else }}
            - name: {{ .fromVolume.name }}
              {{- end }}
              mountPath: /tmp/connectors-source-archives/kafka
            - name: kafka-connector-deployment
              mountPath: /kafka-connector-deployment
            {{- end}}
          {{- end }}
        {{- end }}      
        {{- with .Values.deployment.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: lightstreamer-init-scripts
          configMap:
            name: {{ include "lightstreamer.fullname" . }}-init-scripts
            defaultMode: 0777
        - name: lightstreamer-configuration
          configMap:
            name: {{ include "lightstreamer.fullname" . }}-conf
      {{- with .Values.webServer.errorPageRef }}
        - name: lightstreamer-error-page
          configMap:
            name: {{ required "webServer.errorPageRef.name must be set" .name }}
      {{- end }}
      {{- range $adapterName, $adapterSet := .Values.adapters }}
        {{- if $adapterSet.enabled }}
        - name: lightstreamer-{{ $adapterName | kebabcase }}-adapter-conf
          configMap:
            name: {{ include "lightstreamer.adapters.configMapName" (list $ $adapterName) }}
        {{- end }}
      {{- end }}
      {{- range $key, $value := .Values.keystores }}
        {{- if $value }}
        - name: keystore-{{ $key | lower }}
          secret:
            secretName: {{ required (printf "keystores.%s.keystoreFileSecretRef.name must be set" $key) (($value.keystoreFileSecretRef).name) }}
        {{- end }}
      {{- end }}
      {{- if and (ne ((.Values.license).enterprise).licenseType "DEMO") (eq ((.Values.license).enterprise).licenseValidation "FILE") }}
        {{- with required "license.enterprise.filePathSecretRef must be set" .Values.license.enterprise.filePathSecretRef }}
        - name: lightstreamer-enterprise-license
          secret:
            secretName: {{ required "license.enterprise.filePathSecretRef.name must be set" .name }}
        {{- end }}
      {{- end }}
      {{- /* START VOLUMES FOR PAC FILES */ -}}
      {{- $configMaps := list }}
      {{- range $index, $filePath := (((.Values.license).proxy).pacFiles).filePaths }}
        {{- $configMaps = append $configMaps $filePath.name }}
      {{- end }}
      {{- $configMaps := $configMaps | uniq }}
      {{- range $configMaps }}
        - name: lightstreamer-enterprise-proxy-pac-{{ . }}
          configMap:
            name: {{ . }}
      {{- end -}}
      {{- /* END VOLUMES FOR PAC FILES */ -}}
      {{/* START VOLUMES FOR MPN */}}
      {{- if (.Values.mpn).enabled }}
        - name: lightstreamer-mpn-conf
          configMap:
             name: {{ include "lightstreamer.fullname" . }}-mpn-conf
        - name: lightstreamer-mpn-apple-conf
          configMap:
            name: {{ include "lightstreamer.fullname" . }}-mpn-apple-conf
        - name: lightstreamer-mpn-google-conf
          configMap:
            name: {{ include "lightstreamer.fullname" . }}-mpn-google-conf
        {{- /* START VOLUMES FOR APPLE KEYSTORES */ -}}
        {{- range $keyStoreName, $keyStore := (.Values.mpn.appleNotifierConfig).keystores }}
          {{- if $keyStore }}
        - name: lightstreamer-mpn-keystore-{{ $keyStoreName | lower | replace "_" "-" }}
          secret:
            secretName: {{ required (printf "mpn.appleNotifierConfig.keystores.%s.keystoreFileSecretRef.name must be set" $keyStoreName) $keyStore.keystoreFileSecretRef.name }}
          {{- end }}
        {{- end }}
        {{- /* END VOLUMES FOR APPLE KEYSTORES */ -}}
        {{- /* START VOLUMES FOR APPLE PUSH PACKAGES */ -}}
        {{- range $appName, $app := ((.Values.mpn).appleNotifierConfig).apps }}
          {{- if and $app.enabled (hasPrefix "web." $app.id )}}
        - name: lightstreamer-mpn-push-package-{{ $appName | lower | replace "_" "-" }}
          configMap:
            name: {{ ($app.pushPackageFileRef).name }}
          {{- end }}
        {{- end }}
        {{- /* END VOLUMES FOR APPLE PUSH PACKAGES */ -}}
        {{- /* START VOLUMES FOR GOOGLE SERVICE JSON FILES */ -}}
        {{- range $appName, $app := ((.Values.mpn).googleNotifierConfig).apps }}
          {{- if .enabled }}
        - name: lightstreamer-mpn-service-json-{{ $appName | lower | replace "_" "-" }}
          configMap:
            name: {{ $app.serviceJsonFileRef.name }}
          {{- end }}
        {{- end }}
        {{- /* END VOLUMES FOR GOOGLE SERVICE JSON FILES */ -}}
      {{- end }}
      {{- /* END VOLUMES FOR MPN */ -}}
      {{- /* START VOLUME FOR KAFKA CONNECTOR */ -}}
      {{- if ((.Values.connectors).kafkaConnector).enabled }}
        {{- if not (((.Values.connectors).kafkaConnector).provisioning).fromPathInImage }}
        - name: kafka-connector-deployer-script
          configMap:
            name: {{ include "lightstreamer.kafka-connector.name" . }}-deployer-script
        - name: kafka-connector-deployment
          emptyDir: {}
        {{- end }}
        - name: kafka-connector-configuration
          configMap:
            name: {{ include "lightstreamer.kafka-connector.name" . }}-conf
        {{- range $key, $value := ((.Values.connectors).kafkaConnector).localSchemaFiles }}
          {{- if $value}}
        - name: kafka-connector-schema-files-{{ $key | lower }}
          configMap:
            name: {{ required (printf "connectors.kafkaConnector.localSchemaFiles.%s.name must be set" $key) ($value.name) }}
          {{- end }}
        {{- end }}
        {{- with ((.Values.connectors).kafkaConnector).provisioning }}
          {{- if or .fromUrl .fromGitHubRelease }}
        - name: kafka-connector-source-storage
          emptyDir: {}
          {{- end}}
        {{- end  }}
      {{- end }}
      {{- /* END VOLUME FOR KAFKA CONNECTOR */ -}}
      {{- with .Values.deployment.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.topologySpreadConstraints}}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.deployment.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ int .Values.deployment.terminationGracePeriodSeconds }}
      {{- end }}
