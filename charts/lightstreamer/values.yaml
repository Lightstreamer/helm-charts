#
# Copyright (C) 2025 Lightstreamer Srl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for lightstreamer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


# Common settings

# -- Override the default name of the chart
nameOverride: ""
# -- Replace the chart's default resource naming convention
fullnameOverride: ""
# -- Common labels to apply to all resources
commonLabels: {}

# -- Lightstreamer Docker Image settings
image:
  # -- Remote registry from which to pull the Lightstreamer Docker image
  repository: lightstreamer
  # -- The pull policy for the images
  pullPolicy: IfNotPresent
  # -- The tag of the image to pull
  # @default -- .Chart.appVersion
  tag: "latest"

# The reference to Kubernetes secrets containing the credentials to pull the 
# image
# @default -- []
imagePullSecrets: []

# -- Service Account settings (https://kubernetes.io/docs/concepts/security/service-accounts/)
serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Specifies whether a service account should automatically mount a ServiceAccount's API credentials
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and `create` is `true`, a name is generated using the fullname template.
  name: ""

# -- Mandatory. Lightstreamer Deployment configuration.
deployment:
  # -- Number of replicas
  # (https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/).
  # Used only if `autoscaling.enabled` is set to `false`.
  # @default -- 1
  replicas:
  # -- Additional Deployment annotations
  annotations: []
  # -- Additional Deployment labels
  labels: {}
  # -- The strategy used to replace old Pods by new one (see https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy)
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  # -- The Pod annotations
  # (https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
  podAnnotations: {}
  # -- Additional Pod labels
  # (https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
  podLabels: {}
  # -- The security context for the Pods (https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
    # fsGroup: 2000
  # -- The security context for the container (https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  # -- The hostname for the Pods
  # (https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-hostname-and-subdomain-fields)
  hostname:
  # -- Host networking setting for the Pods
  hostNetwork:
  # -- The DNS policy for the Pods
  # (https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy)
  dnsPolicy:
  # -- The name of the PriorityClass for the Pods
  priorityClassName:
  # -- Optional. Probes configuration.
  probes:
    # -- Optional. Liveness probe configuration.
    liveness:
      # -- Optional. Enablement of the liveness probe.
      # @default -- false
      enabled:
      # -- Mandatory if enabled is set to `true` and `liveness.default` is not
      # specified. Liveness probe configuration based on the default
      # Lightstreamer healthcheck.
      healthCheck:
        # -- Mandatory. The reference to a server socket configuration (see
        # `servers` section below).
        serverRef:
        # Optional fields to be used to control the liveness probe behavior.
        # See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
        initialDelaySeconds:
        periodSeconds:
        failureThreshold:
        timeoutSeconds:
        terminationGracePeriodSeconds:
      # -- Mandatory if enabled is set to `true and `liveness.healthCheck` is
      # not specified. Default startup probe configuration to be used if no
      # `probes.liveness.healthCheck` is specified.
      # See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
      default:
        # httpGet:
        #   path:
        #   port:
    # -- Optional. Readiness probe configuration.
    readiness:
      # -- Optional. Enablement of the readiness probe.
      # @default -- false
      enabled:
      # -- Mandatory if enabled is set to `true` and `readiness.default` is not
      # specified. Readiness probe configuration based on the default
      # Lightstreamer healthcheck.
      healthCheck:
        # -- Mandatory. The reference to a server socket configuration (see
        # `servers` section below).
        serverRef:
        # Optional fields to be used to control the readiness probe behavior.
        # See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
        initialDelaySeconds:
        periodSeconds:
        failureThreshold:
        timeoutSeconds:
        successThreshold:
      # -- Mandatory if enabled is set to `true and `readiness.healthCheck` is
      # not specified. Default startup probe configuration to be used if no
      # `probes.readiness.healthCheck` is specified.
      # See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
      default:
        # httpGet:
        #   path:
        #   port:
    # -- Optional. Startup probe configuration.
    startup:
      # -- Optional. Enablement of the startup probe.
      # @default -- false
      enabled:
      # -- Mandatory if enabled is set to `true` and `startup.default` is not
      # specified. Startup probe configuration based on the default Lightstreamer
      # healthcheck.
      healthCheck:
        # -- Mandatory. The reference to a server socket configuration (see
        # `servers` section below).
        serverRef:
        # Optional fields to be used to control the startup probe behavior.
        # See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
        initialDelaySeconds:
        periodSeconds:
        failureThreshold:
        timeoutSeconds:
        terminationGracePeriodSeconds:
      # -- Mandatory if enabled is set to `true and `startup.healthCheck` is
      # not specified. Default startup probe configuration to be used if no
      # `probes.startup.healthCheck` is specified.
      # See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
      default:
        # httpGet:
        #   path:
        #   port:
  # -- Resource management for Pod and the container
  # (https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources: {}
  # -- Pod lifecyle configuration
  # (https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/)
  lifecycle:
    # preStop:
    #   exec:
    #     command: [ "/lightstreamer/bin/unix-like/stop.sh" ]
  # -- Additional selectors
  additionalSelectors: {}
  # -- Additional volumes
  extraVolumes: []
  # -- Additional volume mounts
  extraVolumeMounts: []
  # -- Additional environment variables
  extraEnv: []
    # - name: JAVA_OPTS
    #   value: "-server -Xms1g -Xmx4g"
  # -- Extra containers configuration
  # (https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)
  extraContainers: []
  # -- Extra init containers configuration
  # (https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)
  extraInitContainers: []
  # -- Node selector setting for the Pod
  # (https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector)
  nodeSelector: {}
  # -- Affinity settings for the Pod
  # (https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity)
  affinity: {}
  # -- Tolerations settings for the Pod
  # (https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
  tolerations: []
  # -- Termination grace period configuration for Pod
  # (https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution)
  terminationGracePeriodSeconds:
  # -- Topology spread constraints configuration for the Pod
  # (https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/)
  topologySpreadConstraints: {}

# -- Mandatory. Lightstreamer Service configuration (https://kubernetes.io/docs/concepts/services-networking/service/).
service:
  # -- Additional Service annotations
  annotations: {}
  # -- Additional Service labels
  labels: {}
  # -- Additional selectors
  additionalSelectors:
    mode: "active"
  # -- The service type
  # (https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
  type:
  # -- Mandatory. The port exposed by the service
  # (https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports)
  port: 8080
  # -- The node port when the `type` is set to `NodePort` or 'LoadBalancer'
  # (https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
  nodePort:
  # -- The reference to a server socket configuration (defined in the 
  # `servers.{}` section below)
  targetPort: defaultServer
  # -- The name of the service port
  name: lightstreamer-service
  # -- The load balancer implementation when the `type` is set to `LoadBalancer`
  # (https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class)
  loadBalancerClass:

# -- Optional. Lightstreamer Ingress configuration (https://kubernetes.io/docs/concepts/services-networking/ingress/)
ingress:
  # -- Enablement of the Ingress
  enabled: true
  # -- Additional Ingress annotations
  annotations: {}
  # -- Additional Ingress labels
  labels: {}
  # -- The name of Ingress class
  className:
  # -- List of Ingress rules.
  # if not set, the ingress will be backed by the service.
  hosts:
    # - host:
    #   paths:
    #     - path: /
    #       pathType: Prefix
  # -- TLS configuration for the Ingress
  # (https://kubernetes.io/docs/concepts/services-networking/ingress/#tls)
  tls: []

# -- Optional. Lightstreamer Autoscaling configuration (https://kubernetes.io/docs/concepts/workloads/autoscaling/#scaling-workloads-horizontally-based)
autoscaling:
  # -- Enablement of the Horizontal Pod Autoscaler
  enabled: false
  # -- Additional HPA annotations
  annotations: {}
  # -- Additional HPA labels
  labels: {}
  # -- The minimum number of replicas
  minReplicas: 
  # -- The maximum number of replicas
  maxReplicas:
  # -- The target CPU utilization percentage
  targetCPUUtilizationPercentage:
  # -- The target memory utilization percentage
  targetMemoryUtilizationPercentage:

# -- Mandatory. Configure the edition, the optional features, and the type of
# license that should be used to run Lightstreamer Server.
license:
  # -- (string) Mandatory. Lightstreamer edition to use.
  # To know full details, open the Welcome Page or the Monitoring Dashboard
  # (Edition tab) of your running Lightstreamer Server.
  # Possible values: `COMMUNITY`, `ENTERPRISE`
  edition: ENTERPRISE
  # -- Mandatory if edition is set to `COMMUNITY`. The Client API to use with
  # your Lightstreamer free license.
  # Possible values: `javascript_client` (for web browser clients),
  # `nodejs_client` (for Node.js clients), `android_client` (for Android
  # clients), `ios_client` (for iOS clients), `flex_client` (for Flex and AIR
  # clients), `silverlight_client` (for Silverlight clients), `javase_client`
  # (for Java SE clients), `python_client` (for Python clients),
  # `dotnet_standard_client` (for .NET Standard clients), `macos_client` (for
  # macOS clients), `tvos_client` (for tvOS clients), `watchos_client` (for
  # watchOS clients), `visionos_client` (for visionOS clients),
  # `blackberry_client` (for BlackBerry clients), `javame_client` (for Java ME
  # clients), `flash_client` (for Flash clients), `generic_client` (for custom
  # clients based on the Lightstreamer protocol).
  # @default -- javascript_client
  enabledCommunityEditionClientApi: "javascript_client"
  # -- Mandatory if `edition` is set to `ENTERPRISE`. Configure the ENTERPRISE
  # edition.
  enterprise:
    # -- (string) Mandatory. The type of the ENTERPRISE edition.
    # Possible values: `DEMO`, `EVALUATION`, `STARTUP`, `NON-PRODUCTION-LIMITED`,
    # `NON-PRODUCTION-FULL`, `PRODUCTION`, `HOT-STANDBY`.
    licenseType: DEMO
    # -- (string) Mandatory, Identifier of the contract in place. Use `DEMO` to
    # run with the embedded Demo license.
    contractId: DEMO
    # -- (string) Optional. Choose between online (cloud-based) and file-based
    # license validation.
    # If set to `ONLINE`, the following host names below must be reachable on
    # port 443: `https://clm1.lightstreamer.com/`,
    # `https://clm2.lightstreamer.com/`.
    # If set to `FILE`, based on `licenseType`, one or both the values are possible.
    # For EVALUATION and STARTUP: ONLINE is mandatory.
    # For PRODUCTION, HOT-STANDBY, NON-PRODUCTION-FULL, and NON-PRODUCTION-LIMITED:
    # you can choose between ONLINE and FILE.
    # For DEMO: the value is ignored, as no validation is done.
    licenseValidation: ONLINE
    # -- Used only if `licenseValidation` set to "ONLINE".
    # Secret name and key where the password used for validation of online
    # licenses is stored.
    # Leave blank if `licenseType` is set to `DEMO` or `licenseValidation` set to `FILE`.
    onlinePasswordSecretRef:
      name:
      key:
    # -- Used only if `licenseValidation` set to `FILE`.
    # Secret name and key where the license file is stored.
    filePathSecretRef:
      name:
      key:
    # -- In case of file-based license validation, this element allows to
    # activate periodic automatic upload. This makes it much easier for
    # the systems admins to deliver the logs, as contractually agreed.
    # In case of online license validation, the audit logs are always
    # automatically uploaded to the Online License Manager, irrespective
    # of this element.
    # If enabled, the th following host name must be reachable on port 443:
    #      - https://service.lightstreamer.com/
    # If not enabled, audit logs must be delivered manually if required by
    # license terms.
    # @default -- true
    enableAutomaticAuditLogUpload: true
    # -- Optional. Configure the optional features.
    optionalFeatures:
      # -- Optional. Restrict the feature set with respect to the license in
      # use.
      # If set to `true`, use the feature set detailed in `features`. If a
      # required feature is not allowed by the license in use, the server will
      # not start.
      # If set to `false`, use the feature set specified by the license in use.
      # @default -- false
      enableRestrictedFeaturesSet: true
      # -- Mandatory if `enableRestrictedFeaturesSet` is set to `true`. Set of
      # features to enable. If a required feature is not allowed by the license
      # in use, the server will not start.
      # @default -- {}
      features:
        # -- Mandatory. Mobile Push Notifications.
        enableMpn: true
        # -- (string) Mandatory. Max message rate (downstream).
        # Possible values: `1`, `3`, `unlimited`.
        maxDownstreamRate: "1"
        # -- Mandatory. Bandwidth control.
        enableBandwidthControl: false
        # -- Mandatory. TLS/SSL Support.
        enableTlsSsl: false
        # -- Mandatory. JMX Management API.
        enableJmx: false
        # -- Mandatory. JavaScript Client API.
        enableJavascriptClient: false
        # -- Mandatory. Node.js Client API.
        enableNodeJsClient: false
        # -- Mandatory. Android Client API.
        enableAndroidClient: false
        # -- Mandatory. iOS Client API.
        enableIOSClient: false
        # -- Mandatory. Flex and AIR Client API.
        enableFlexClient: false
        # -- Mandatory. Silverlight Client API.
        enableSilverlightClient: false
        # -- Mandatory. Java SE Client API.
        enableJavaSEClient: false
        # -- Mandatory. Python Client API.
        enablePythonClient: false
        # -- Mandatory. .NET Standard Client API.
        # Includes also the old Windows .NET libraries: .NET PCL Client API,
        # Unity Client API, .NET Client API, WinRT Client API, and Windows
        # Phone Client API.
        enableDotNETStandardClient: false
        # -- Mandatory. macOS Client API.
        enableMacOSClient: false
        # -- Mandatory. tvOS Client API.
        enableTvOSClient: false
        # -- Mandatory. watchOS Client API.
        enableWatchOSClient: false
        # -- Mandatory. visionOS Client API.
        enableVisionOSClient: false
        # -- Mandatory. BlackBerry Client API.
        enableBlackBerryClient: false
        # -- Mandatory. Java ME Client API.
        enableJavaMEClient: false
        # -- Mandatory. Flash Client API.
        enableFlashClient: false
        # -- Mandatory. Generic Client API.
        enableGenericClient: false
  # -- Optional. Periodically check whether any Lightstreamer Server update is
  # available. In such case, a notification is written to the log file.
  # If set to true, perform automatic update check. The following host name
  # must be reachable on port 443: https://service.lightstreamer.com/
  # If set to false, do not perform automatic update check.
  # @default -- true
  enableAutomaticUpdateCheck:
  # -- Optional. Configure a proxy server for outbound Internet access, if
  # necessary.
  # Internet access is needed, depending on the above configuration, to reach
  # the Online License Manager, to upload audit logs, and to check for software
  # updates.
  # The host names below must be reachable from the proxy on port 443:
  # - https://clm1.lightstreamer.com/    (depending on the configuration)
  # - https://clm2.lightstreamer.com/    (depending on the configuration)
  # - https://service.lightstreamer.com/ (regardless of the configuration)
  # Several methods are provided for the proxy configuration, including
  # PAC files, auto-discovery, and direct HTTP and SOCKS configuration.
  proxy:
    # -- Optional. List of HTTP Proxy Server configurations.
    # The proxies all checked and the first acceptable one is used.
    # If any SOCKS proxy in `socksProxies` is configured too, it is checked in
    # parallel with the defined HTTP proxies.
    httpProxies:
      - # -- (string) Optional, but empty value are skipped. Host name or IP
        # address of the proxy server.
        # Examples: "proxy.mycompany.com", "192.168.0.5".
        host:
        # -- (int) Optional. Port number of the proxy server.
        port:
        # -- (string) Optional. Scheme of the proxy server.
        # Possible values: `http`, `https`.
        scheme:
        # -- Mandatory if proxy authentication is required. The name of the
        # secret containing the credentials. The secret must contain the keys
        # `user` and `password`.
        credentialsSecretRef:
    # -- Optional. List of SOCKS Proxy Server configurations.
    # The proxies are all checked and the first acceptable one is used.
    # If any HTTP proxy is configured in `httpProxies` too, it is checked in
    # parallel with the defined SOCKS proxies.
    socksProxies:
      - # -- (string) Optional. Host name or IP address of the proxy server.
        # Examples: "socks.mycompany.com", "192.168.0.9"
        host:
        # -- (int) Mandatory. Port number of the SOCKS server.
        port:
        # -- (string) Protocol version to use.
        # Possible values: `SOCKS4`, `SOCKS4a`, `SOCKS5`.
        version:
        # -- Mandatory if proxy authentication is required. The name of the
        # secret containing the credentials. The secret must contain the keys
        # `user` and `password`.
        credentialsSecretRef:
    # -- Optional. Configure one or multiple proxy auto-configuration (PAC),
    # files for simpler proxy configuration.
    # @default -- []
    pacFiles:
      # -- Optional. List of URLs of the PAC files.
      # @default -- []
      fileUrls: []
        # - "http://intra.mycompany.com/company_pac_file1.pac"
        # - "http://intra.mycompany.com/company_pac_file2.pac"
      # -- Optional. List of configmap names and keys where the PAC files are
      # stored.
      # @default -- []
      # -- Optional. List of configmap names and keys where the PAC files are
      # stored.
      filePaths: []
        # - name: pack-configmap
        #   key: pac-file1.pac
        # - name: pack-configmap
        #   key: pac-file2.pac
        # - name: pack-configmap2
        #   key: pac-file2.pac
    # -- Optional. In case no proxy configuration is provided or the provided
    # configuration does not work, automatic proxy discovery is attempted (via
    # system environment check and WPAD).
    # @default -- false
    enableProxyAutodiscovery:
    # -- Optional. Specifies a NIC to use to access the external services, with
    # or without a proxy.
    networkInterface:

# -- Mandatory. Logging configuration for Lightstreamer Server.
logging:
  # -- Mandatory. Appenders configuration.
  # Every logger must refer to one or more appenders defined here.
  appenders:
    # -- At least one must be provided. An appender configuration.
    # Choose whatever key you like, as long as it is unique.
    dailyRolling:
      # -- (string) Mandatory. The type of appender.
      # Possible values: `DailyRollingFile`, `Console`.
      type: DailyRollingFile
      # -- (string) Mandatory. The conversion pattern.
      # See https://logback.qos.ch/index.html for details.
      pattern: "%d{\"dd-MMM-yy HH:mm:ss,SSS\"}|%-5.5(%p%marker)|%-19.19c{19}|%-27.27t|%m%n"
      # -- Mandatory if `type` is set to `DailyRollingFile`. The name of the log
      # file.
      fileName: "lightstreamer.log"
      # -- Mandatory if `type` is set to `DailyRollingFile`. The pattern to use
      # for the log file.
      fileNamePattern: "lightstreamer-%d{yyyy-MM-dd}.log"
      # -- (string) Optional. The reference to a volume to use for the log file.
      volumeRef:
    # anotherDailyRolling:
    #   type: DailyRollingFile
    #   pattern: "%d{\"dd-MMM-yy HH:mm:ss,SSS\"}|%-5.5(%p%marker)|%-19.19c{19}|%-27.27t|%m%n"
    #   fileName: "anotherlogfile.log"
    #   fileNamePattern: "anotherlogfile-%d{yyyy-MM-dd}.log"
    #   volumeRef: custom-logs
    console:
      type: Console
      pattern: "%d{\"dd.MMM.yy HH:mm:ss,SSS\"} <%5.5(%p%marker)> %m%n"
  # -- Optional. Loggers configuration.
  loggers:
    # -- Optional. Logger used by the internal monitoring system to log load
    # statistics at `INFO` level  with a human-readable syntax.
    # The frequency of the samples produced by the internal monitoring system
    # is governed by the `management.collectorMillis` setting.
    # However, a resampling to lower frequencies can be performed, based on the
    # level specified for each logger; in particular:
    #   at `TRACE` level, all samples are logged;
    #   at `DEBUG` level, one sample out of 10 is logged;
    #   at `INFO` level, one sample out of 60 is logged;
    #   at a higher level, no log is produced.
    # The resampling behavior can be changed at runtime, by changing the level;
    # however, if the level is set to `ERROR` on startup, the logger will be
    # disabled throughout the life of the Server, regardless of further changes.
    # When resampling is in place, note that, for each displayed sample, values
    # that are supposed to be averaged over a timeframe still refer to the
    # current sample's timeframe (based on  `management.collectorMillis`);
    # however, values that are supposed to be the maximum over all timeframes
    # refer also to the samples that were not displayed.
    # On the other hand, delta statistics, like "new connections", are always
    # collected starting from the previous logged sample.
    lightstreamerMonitorText:
      # -- Optional. List of references to the appenders defined in
      # `.logging.appenders`.
      appenders:
        - console
      # -- Optional. The level of the logger.
      # @default -- DEBUG
      level: INFO
    # -- Optional. Logger used by the internal monitoring system to log load
    # statistics at `INFO` level with a CSV syntax.
    # See `lightstreamerMonitorText` for details.
    lightstreamerMonitorTAB:
      # -- Optional. List of references to the appenders defined in
      # `.logging.appenders`.
      appenders:
        - console
      # -- Optional. The level of the logger.
      # @default -- DEBUG
      level: ERROR
    # -- Optional. The following is the base logger of all logging messages
    # printed by Lightstreamer Kernel (with a few exceptions).
    # Messages logged at `INFO` level notify major server activities, like
    # session starting and ending. If these messages are enabled, they are also
    # supplied to the internal MONITOR data adapter, together with `WARN` and
    # `ERROR` messages.
    # Messages logged at `DEBUG` level notify minor operations and all data flow
    # inside the Server. They should not be enabled with production load
    # levels.
    # No useful messages are logged at `TRACE` level. The level is reserved for
    # `DEBUG` versions of the Server.
    # Severe `ERROR` messages are logged with a `FATAL` marker; in fact, a
    # `FATAL` level is not natively supported by logback.
    # Thanks to the marker, these messages can be filtered through logback's
    # MarkerFilter.
    # By the factory pattern configuration, `FATAL` is logged instead of `ERROR`
    # for these messages (note the tricky "%-5.5(%p%marker)" pattern).
    lightstreamerLogger:
      # -- Optional. List of references to the appenders defined in
      # `.logging.appenders`.
      appenders:
        - console
      # -- Optional. The level of the logger.
      # @default -- DEBUG
      level: INFO
      # -- Optional. The levels of subloggers used to separate logging messages
      # in families. The appenders are inherited from `lightstreamerLogger`.
      subLoggers:
        # -- Optional. Logging of system components initialization.
        # At `DEBUG` level, initialization details, error details and all
        # configuration settings are reported.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.init: INFO
        # -- Optional. Logging of license check phase.
        # At `DEBUG` level, check details and error details can be found in case
        # of license check failure.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.license: INFO
        # -- Optional. Logging of background activities and related
        # configuration and issues.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.kernel: INFO
        # -- Optional. Logging of external services activity.
        # At `DEBUG` level, details on external services activities and
        # configuration, as well as details on connectivity issues, are
        # reported.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.external: INFO
        # -- Optional. Logging of activity and issues in connection management.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.io: WARN
        # -- Optional. Logging of activity and issues in TLS configuration.
        # At `DEBUG` level, details on the protocol and cipher suite configuration are reported
        # @default -- inherited from `lightstreamerLogger.io`
        lightstreamerLogger.io.ssl: WARN
        # -- Optional. Logging of client request dispatching.
        # At `DEBUG` level, request processing details are reported.
        # All log from this logger and its subloggers reports the IP and port of the involved connection
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.connections: WARN
        # -- Optional. Logging of issues related to TLS/SSL configuration and
        # handshake management.
        # At `DEBUG` level, details on the cipher suites are report.
        # @default -- inherited from `lightstreamerLogger.connections`
        lightstreamerLogger.connections.ssl: WARN
        # -- Optional. Logging of client request interpretation issues.
        # At `WARN` level, each time a request contains an unexpected HTTP header,
        # which the Server refuses or ignores, a notification is reported
        # that an interpretation error is possible.
        # At `INFO` level, details upon request refusals are reported.
        # At `DEBUG` level, details for all requests and responses are reported.
        # @default -- inherited from `lightstreamerLogger.connections`
        lightstreamerLogger.connections.http: ERROR
        # -- Optional. Logging of details for issues related to requests over
        # WebSockets.
        # At `DEBUG` level, details for all requests and responses are reported.
        # @default -- inherited from `lightstreamerLogger.connections`
        lightstreamerLogger.connections.WS: WARN
        # -- Optional. Logging of issues related to information received via
        # the proxy protocol, when enabled.
        # At `DEBUG` level, details of all information received are reported.
        # @default -- inherited from `lightstreamerLogger.connections`
        lightstreamerLogger.connections.proxy: INFO
        # -- Optional. Logging of internal web server activity; it also logs
        # requests of static resources related to push request.
        # At `DEBUG` level, error details are reported.
        # All log from this logger and its subloggers reports the IP and port
        # of the involved connection.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.webServer: WARN
        # -- Optional. Logging of request management related to the JMX Tree
        # feature.
        # At `DEBUG` level, error details are reported.
        # @default -- inherited from `lightstreamerLogger.webServer`
        lightstreamerLogger.webServer.jmxTree: WARN
        # -- Optional. Logging of handling of special requests from apple
        # clients related to MPN.
        # At `DEBUG` level, error details are reported.
        # @default -- inherited from `lightstreamerLogger.webServer`
        lightstreamerLogger.webServer.appleWebService: WARN
        # -- Optional. Logging of parsing and elaboration of client requests
        # At `DEBUG` level, client request details are reported.
        # All log from this logger and its subloggers reports the IP and port
        # of the involved connection.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.requests: INFO
        # -- Optional. Logging of elaboration of client polling requests.
        # @default -- inherited from `lightstreamerLogger.requests`
        lightstreamerLogger.requests.polling: WARN
        # -- Optional. Logging of elaboration of client message requests.
        # At `DEBUG` level, details on the message forwarding are reported.
        # @default -- inherited from `lightstreamerLogger.requests`
        lightstreamerLogger.requests.messages: INFO
        # -- Optional. Logging of Data Adapters interactions.
        # At `DEBUG` level, details on subscription operations are reported.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.subscriptions: DEBUG
        # -- Optional. Logging of events coming from the Data Adapters.
        # At `DEBUG` level, all update events are dumped.
        # @default -- inherited from `lightstreamerLogger.subscriptions`
        lightstreamerLogger.subscriptions.upd: DEBUG
        # -- Optional. Logging of events preprocessing stage.
        # At `DEBUG` level, events dispatched to ItemEventBuffers are dumped.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.preprocessor: INFO
        # -- Optional. Logging of internal thread management and events
        # dispatching.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.scheduler: INFO
        # -- Optional. Logging of InfoPump and ItemEventBuffers internal
        # activity.
        # At `DEBUG` level, updates to be sent to the clients are dumped.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.pump: INFO
        # -- Optional. Logging of management of messages received from the
        # clients.
        # At `DEBUG` level, details of message processing are logged.
        # All log from this logger reports the IP and port of the involved connection.
        # @default -- inherited from `lightstreamerLogger.pump`
        lightstreamerLogger.pump.messages: INFO
        # -- Optional. Logging of socket write activity.
        # At `DEBUG` level, all socket writes are dumped.
        # All log from this logger reports the IP and port of the involved connection.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.push: INFO
        # -- Optional. Logging of mobile push notifications activity, done
        # through the various subloggers.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.mpn: INFO
        # -- Optional. Logging of MPN Module recurrent activity.
        # At `INFO` level, main operation exit points and outcomes are dumped.
        # At `DEBUG` level, the various operation entry entry and exit points are logged.
        # @default -- inherited from `lightstreamerLogger.mpn`
        lightstreamerLogger.mpn.lifecycle: INFO
        # -- Optional,. Logging of mobile push notifications activity.
        # At `INFO` level, main operation exit points and outcomes are dumped.
        # At `DEBUG` level, the various operation entry entry and exit points are
        # logged.
        # @default -- inherited from `lightstreamerLogger.mpn`
        lightstreamerLogger.mpn.operations: INFO
        # -- Optional. Logging of mobile push notifications request processing;
        # requests include those from clients (through the "client" sublogger)
        # and those related with internal operations.
        # At `INFO` level, all request processing exit points and outcomes are
        # dumped.
        # At `DEBUG` level, all request processing entry points are logged.
        # All log related with client requests reports the IP and port of the
        # involved connection.
        # @default -- inherited from `lightstreamerLogger.mpn`
        lightstreamerLogger.mpn.requests: WARN
        # -- Optional. Logging of mobile push notifications activity related to
        # notification gathering.
        # At `INFO` level, all push notifications ready to be sent are dumped.
        # @default -- inherited from `lightstreamerLogger.mpn`
        lightstreamerLogger.mpn.pump: WARN
        # -- Optional. Logging of mobile push notifications activity related to
        # database.
        # At `DEBUG` level, all database operation entry and exit points are
        # logged.
        # @default -- inherited from `lightstreamerLogger.mpn`
        lightstreamerLogger.mpn.database: WARN
        # -- Optional. Logging of mobile push notifications activity related to
        # database transactions.
        # At `INFO` level, statistics on the database transactions are logged.
        # At `DEBUG` level, all database transaction entry and exit points are
        # logged.
        # @default -- inherited from `lightstreamerLogger.mpn.database`
        lightstreamerLogger.mpn.database.transactions: WARN
        # -- Optional. Logging of mobile push notifications activity related to
        #  Apple platforms; for activity related with notification submission,
        # specific subloggers are present for each application, e.g.:
        # `lightstreamerLogger.mpn.apple.com.mydomain.myapp`.
        # At `INFO` level, all push notification payloads are dumped.
        # @default -- inherited from `lightstreamerLogger.mpn`
        lightstreamerLogger.mpn.apple: WARN
        # -- Optional. Logging of mobile push notifications activity related to
        # Google platforms; for activity related with notification submission,
        # specific subloggers are present for each application, e.g.:
        # `lightstreamerLogger.mpn.google.com.mydomain.myapp`.
        # At `INFO` level, all push notification payloads are dumped.
        # @default -- inherited from `lightstreamerLogger.mpn`
        lightstreamerLogger.mpn.google: WARN
        # -- Optional. Logging of issues related with the special adapters
        # handled by the MPN Module.
        # @default -- inherited from `lightstreamerLogger.mpn`
        lightstreamerLogger.mpn.status_adapters: WARN
        # -- Optional. Logging of JavaScript client messages.
        # A at `DEBUG` level, log messages sent by the Web and Node.js (Unified
        # API) Client Libraries are logged. Remote logging must be enabled on
        # the client side.
        # All log from this logger reports the IP and port of the involved
        # connection.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.webclient: DEBUG
        # -- Optional. Logging of JMX setup issues; note that full JMX features
        # could be restricted depending on Edition and License Type.
        # At `DEBUG` level, JMX connectors initialization details are logged.
        # @default -- inherited from `lightstreamerLogger`
        lightstreamerLogger.monitoring: INFO
    # -- Optional. Logging healthcheck request processing at INFO level.
    # The logger does not inherit from `lightstreamerLogger` in order to
    # simplify sending the log to a dedicated appender.
    # All log from this logger reports the IP and port of the involved
    # connection.
    lightstreamerHealthCheck:
      # -- Optional. List of references to the appenders defined in
      # `.logging.appenders`.
      appenders:
        - console
      # -- Optional. The level of the logger.
      # @default -- DEBUG
      level: INFO
    # -- Optional. Logger only used by the provided Proxy Data and Metadata
    # Adapters, when used.
    # It logs Adapter activity at `INFO`, `WARN`, `ERROR` and `FATAL` level
    # (the latter through the `FATAL` marker).
    # At `DEBUG` level, outcoming request and incoming response messages are
    # also dumped.
    # At `TRACE` level, incoming real-time update messages are also dumped.
    lightstreamerProxyAdapters:
      # -- Optional. List of references to the appenders defined in
      # `.logging.appenders`.
      appenders:
        - console
      # -- Optional. The level of the logger.
      # @default -- DEBUG
      level: INFO
    # These loggers are related to Hibernate, a component used by the MPN Module
    # for its persistence with the database. In case of need, please refer to
    # Hibernate documentation for more information on its logging categories and
    # their configuration.
    org.hibernate:
      appenders:
        - console
      level: WARN
    java.sql:
      appenders:
        - console
      level: WARN
    org.jboss.logging:
      appenders:
        - console
      level: WARN
    com.zaxxer.hikari:
      appenders:
        - console
      level: INFO
    # These loggers are related to other third-party libraries used internally
    # by the Server.
    org.apache.http:
      appenders:
        - console
      level: ERROR
    com.github.markusbernhardt.proxy:
      appenders:
        - console
      level: WARN
    org.restlet:
      appenders:
        - console
      level: ERROR
    org.jminix:
      appenders:
        - console
      level: ERROR
    common.jmx.velocity:
      appenders:
        - console
      level: ERROR
    com.turo:
      appenders:
        - console
      level: ERROR
    com.google:
      appenders:
        - console
      level: ERROR
    io.netty:
      appenders:
        - console
      level: ERROR
    org.codehaus.janino:
      appenders:
        - console
      level: WARN
    io.grpc:
      appenders:
        - console
      level: WARN
    io.opencensus:
      appenders:
        - console
      level: WARN
    org.conscrypt:
      appenders:
        - console
      level: ERROR
    # These loggers are related to JDK services.
    javax.management.remote:
      appenders:
        - console
      level: ERROR
    javax.management.mbeanserver:
      appenders:
        - console
      level: ERROR
    com.sun.jmx.remote:
      appenders:
        - console
      level: ERROR
    # This also requires that the JVM property javax.net.debug is set as an
    # empty string (supported since java 9).
    javax.net.ssl:
      appenders:
        - console
      level: "OFF"
  # Put here any additional loggers you want to configure.
  extraLoggers:
    # anotherLogger:
    #   appenders:
    #     - console
    #   level: INFO

# -- Mandatory. Map of HTTP/S server socket configurations.
# Every key in the map defines a specific listening socket configuration, which
# can then be referenced through the whole configuration.
# Defining multiple listening socket allows the coexistence of private and
# public ports. This allows the use of multiple address for accessing the Sever
# via TLS/SSL, because different HTTPS sockets can use different keystores.
# In particular this is the case when the Server is behind load balancer and
# the `cluster.controlLinkAddress` setting is leveraged to ensure that all
# requests issued by the same client are dispatched to the same Server instance.
servers:
  # -- At least one must be provided. An HTTP server socket configuration.
  defaultServer:
    # -- Optional. Enable this socket configuration.
    # @default -- false
    enabled: true
    # -- Mandatory. The name of the HTTP/S server. Note that it is notified to
    # the client upon connection and it is made available to application code
    # by the Unified Client SDKs through the _serverSocketName_ property in the
    # _ConnectionDetails_ class. It must be an ASCII string with no control
    # characters and it must be unique among all server configurations.
    # The name must be unique among all server configurations.
    name: "Lightstreamer HTTP Server"
    # -- Mandatory. Listening TCP port.
    port: 8080
    # -- Optional. Enabling of the https protocol.
    # HTTPS service is an optional feature, available depending on Edition and
    # License Type. To know what features are enabled by your license, please
    # see the License tab of the Monitoring Dashboard (by default, available at
    # /dashboard).
    # See `sslConfig` for general details on TLS/SSL configuration.
    # @default -- false
    enableHttps: false
    # -- (int) Optional. Size of the system buffer for incoming TCP connections
    # Overrides the default system setting.
    # @default -- the system setting
    backlog:
    # -- (string) Optional. Provides meta-information on how this listening
    # socket will be used, according with the deployment configuration.
    # This can inform the Server of a restricted set of requests expected on
    # the port, which may improve the internal backpressure mechanisms.
    #
    # If set to `CREATE_ONLY`, declares that the port is only devoted to `S`
    # connections, according with the provided Clustering.pdf document.
    #
    # If set to `CONTROL_ONLY`, declares that the port is only devoted to `CR`
    # connections,according with the provided Clustering.pdf document. The
    # Server will enforce the restriction.
    #
    # If set to `PRIORITY`, requests issued to this port will follow a fast
    # track. In particular, they will be never enqueued to the SERVER thread
    # pool, but only the ACCEPT pool; and they will not be subject to any
    # backpressure-related limitation (like `load.acceptPoolMaxQueue`). This
    # should ensure that the requests will be fulfilled as soon as possible,
    # even when the Server is overloaded. Such priority port is, therefore,
    # ideal for opening the Monitoring Dashboard to inspect overload issues in
    # place. It can also be used to open sessions on a custom Adapter Set, but,
    # in that case, any thread pool specifically defined for the Adapters will
    # be entered, with possible enqueueing. Anyway, such port is only meant for
    # internal use and it is recommended not to leave it publicly accessible.
    # Furthermore, in case of HTTPS server socket (`enableHttps` set to `true`)
    # TLS-handshake-related tasks will not be enqueued to the TLS-SSL HANDSHAKE
    # or TLS-SSL AUTHENTICATION thread pool, but only to a dedicated pool.
    #
    # If set to `GENERAL_PURPOSE`, the port can be used for any kind of request.
    # It can always be set in case of doubts. Note that ports can be
    # `CREATE_ONLY` or `CONTROL_ONLY` only depending on client behavior. For 
    # clients based on LS SDK libraries, this is related to the use of the
    # `cluster.controlLinkAddress` setting. Usage examples are provided in the
    # Clustering.pdf document.
    # @default -- "GENERAL_PURPOSE"
    portType:
    # -- Optional. Settings that allow some control over the HTTP headers of
    # the provided responses. Header lines can only be added to those used by
    # the Server, either by specifying their value or by copying them from the
    # request.
    # Multiple rules can be defined; their order is ignored.
    # In any case of replicated header fields, multiple lines will be inserted;
    # it is assumed that multiple occurrences are allowed for those fields.
    # No syntax and consistency checks are performed on the resulting HTTP
    # headers; only custom or non-critical fields should be used.
    # The header names involved are always converted to lower case.
    responseHttpHeaders:
      # -- Optional. Requests to look for any header lines for  the specified
      # field name on the HTTP request header and to copy them to the HTTP
      # response header.
      # @default -- []
      echo:
        # - "cookie"
      # -- Optional. Requests to add to the HTTP response header a line with
      # the specified `name` (mandatory) and `value` (optional).
      # The suggested setting for _X-Accel-Buffering_ may help to enable
      # streaming support when proxies of several types are involved.
      add:
        - name: "X-Accel-Buffering"
          value: "no"
        # - name: "my-header"
        #   value: "MyValue"
    # -- (string) Optional. Can be used on a multihomed host to specify the IP
    # address to bind the server socket to.
    # @default -- accept connections on any/all local addresses
    listeningInterface:
    # -- Optional. Settings that allow for better recognition of the remote
    # address of the connected clients. This can be done in two ways:
    #
    # - by taking advantage of the X-Forwarded-For HTTP header, that
    #   intermediate HTTP proxies and level-7 Load Balancers usually set to
    #   supply connection routing information in an incremental way (this is
    #   done through the `skipLocalForwards` setting);

    # - by receiving the routed address directly from a TCP reverse proxy or
    #   level-4 Load Balancer through the Proxy Protocol, when the proxy is
    #   configured to do so (this is done through the `enableProxyProtocol` 
    #   setting).
    #
    # The two techniques can also coexist, but, in that case, the address
    # through the proxy protocol would always be considered as the real client
    # address and all addresses in the chain specified in X-Forwarded-For would
    # be considered as written by client-side proxies.
    # The address determined in this way will be used in all cases in which the
    # client address is reported or checked. For logging purposes, the
    # connection endpoint will still be written, but the real remote address,
    # if available and different, will be added.
    # The determined address may also be sent to the clients, depending on the
    # Client SDK in use.
    # @default -- all settings at their defaults
    clientIdentification:
      # -- Optional.  If set to `true`, prevents the determined address from
      # being sent to the clients. In fact, the address is notified to the
      # client upon connection and it is made available to application code by
      # the most recent Unified Client SDKs through the clientIp property in
      # the _ConnectionDetails_ class.
      # For instance, the flag can and should be set to `true` in case the
      # identification of the remote address is not properly tuned and the
      # determined address may be a local one.
      # @default -- false
      enablePrivate:
      # -- Optional. If set to `true`, instructs the Server that the connection
      # endpoint is a reverse proxy or load balancer that sends client address
      # information through the Proxy Protocol. The received address and port
      # will be used as the real client address and port.
      # In particular, they will appear in all log lines for this client (but
      # for the `lightstreamerLogger.connections` logger).
      # On the other hand, the reported protocol will always refer to the
      # actual connection.
      # There is no dynamic detection of the proxy protocol; hence, if enabled,
      # all connections to this port must speak the proxy protocol (for
      # instance, any healthcheck requests should be configured properly on the
      # proxy) and, if not, no connection can speak the proxy protocol,
      # otherwise the outcome would be unspecified.
      # On the other hand, if enabled, both proxy protocol version 1 and 2 are
      # handled; only information for normal TCP connections is considered.
      # @default -- false
      enableProxyProtocol:
      # -- (int) Optional. Timeout applied while reading for information 
      # through the proxy protocol, when enabled. Note that a reverse proxy or
      # load balancer speaking the proxy protocol is bound to send information
      # immediately after connection start; so the timeout can only apply to 
      # cases of wrong configuration, local network issues or illegal access to 
      # this port.
      # For this reason, the read is performed directly in the ACCEPT thread
      # pool and this setting protects that pool against such unlikely events.
      # @default -- 1000
      proxyProtocolTimeoutMillis:
      # -- (int) Optional, but nonzero values forbidden if `enableProxyProtocol`
      # is `true`. Number of entries in the X-Forwarded-For header that are
      # expected to be supplied on each HTTP request (including Websocket
      # handshake) by the intermediate nodes (e.g. reverse proxies, load
      # balancers) that stand in the local environment.
      # If N entries are expected from local nodes, this means that the
      # Nth-nearest entry corresponds to the node connected to the farthest
      # local intermediate node, hence to the client. So, that entry will be
      # used as the real client address. In particular, it will appear in all
      # log lines that refer to the involved HTTP request or Websocket.
      # If set to `0` or left at the default, all entries in _X-Forwarded-For_
      # will be considered as written by client-side proxies, hence the
      # connection endpoint address will be used (unless, of course,
      # `enableProxyProtocol` is set to `true`, which overrides the behavior).
      # Note that a similar correction for port and protocol is not applied;
      # hence, when an address corrected through a nonzero setting is reported,
      # any port and protocol associated will still refer to the actual
      # connection.
      # @default -- 0
      skipLocalForwards:
      # -- Optional. If set to `true`, causes the list of entries of the
      # X-Forwarded-For header, when available, to be added to log lines
      # related to the involved HTTP request or Websocket.
      # If `skipLocalForwards` is nonzero, only the entries farther than the
      # determined "real" remote address are included.
      # These entries are expected to be written by client-side proxies.
      # @default -- false
      enableForwardsLogging:
    # -- Mandatory if `enableHttps` is `true`. TLS/SSL settings for this socket
    # configuration.
    sslConfig:
      # -- Optional. If defined, overrides the default JVM's Security Provider
      # configured in the java.security file of the JDK installation. This
      # allows the use of different Security Providers dedicated to single
      # listening ports.
      # When configuring a Security Provider, the related libraries should be
      # added to the Server classpath. This is not needed for the Conscrypt
      # provider, which is already available in the Server distribution (but
      # note that the library includes native code that only targets the main
      # platforms).
      # @default -- the default JVM's Security Provider configured in the
      # java.security file of the JDK installation.
      tlsProvider:
      # -- Mandatory. The reference to a keystore configuration (defined in
      # `keyStores`).
      # See the `keyStores.myServerKeystore` settings for general details on
      # keystore configuration.
      keyStoreRef: myServerKeystore
      # -- Optional, but forbidden if `removeCipherSuites` is used.
      # Specifies all the cipher suites allowed for the TLS/SSL interaction,
      # provided that they are included, with the specified name, in the set of
      # of "supported" cipher suites of the underlying Security Provider.
      # The default set of the "supported" cipher suites is logged at startup
      # by the `lightstreamerLogger.io.ssl` logger at `DEBUG` level.
      # If not used, the `removeCipherSuites` setting is considered; hence, if
      # `removeCipherSuites` is also not used, all cipher suites enabled by the
      # Security Provider will be available.
      # The order in which the cipher suites are specified can be enforced as
      # the server-side preference order (see
      # `enforceServerCipherSuitePreference`).
      # @default -- []
      allowCipherSuites: []
        # - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
      # -- Optional, but forbidden if `allowCipherSuites` is used.
      # Pattern to be matched against the names of the enabled cipher suites in
      # order to remove the matching ones from the enabled cipher suites set.
      # Any pattern in java.util.regex.Pattern format can be specified.
      # This allows for customization of the choice of the cipher suites to be
      # used for incoming https connections (note that reducing the set of
      # available cipher suites may cause some client requests to be refused).
      # When this setting is used, the server-side preference order of the
      # cipher suites is determined by the underlying Security Provider.
      # Note that the selection is operated on the default set of the cipher
      # suites "enabled" by the Security Provider, not on the wider set of the
      # "supported" cipher suites. The default set of the "enabled" cipher
      # suites is logged at startup by the `lightstreamerLogger.io.ssl` logger
      # at `DEBUG` level.
      # @default -- []
      removeCipherSuites: []
        # - TLS_RSA_
      # -- Optional. Determines which side should express the preference when
      # multiple cipher suites are in common between server and client.
      # Note, however, that the underlying Security Provider may ignore this
      # setting. This is the case, for instance, of the Conscrypt provider.
      enforceServerCipherSuitePreference:
        # -- Optional. If set to `true`, the Server will choose the cipher
        # suite based on its preference order, specified through `order`.
        # If set to `false`, the Server will get a cipher suite based on the
        # preference order specified by the client. For instance, the client
        # might privilege faster, but weaker, suites.
        # @default -- false
        enabled: true
        # -- (string) Optional. Preference order for choosing the cipher suite.
        # If set to `JVM`  ordering is demanded to the underlying Security
        # Provider, which, usually, privileges the strongest suites.
        # If set to `config` (which is allowed only if `allowCipherSuites` is
        # used), the order in which the `allowCipherSuites` elements are
        # specified determines the preference order.
        # @default -- JVM
        order: "JVM"
      # -- Optional. If set to `false`, causes any client-initiated TLS
      # renegotiation request to be refused by closing the connection. This
      # policy may be evaluated in a trade-off between encryption strength and
      # performance risks.
      # Note that, with the default SunJSSE Security Provider, a better way to
      # achieve the same at a global JVM level is by setting the dedicated
      # `jdk.tls.rejectClientInitiatedRenegotiation` JVM property to `true`.
      # @default -- true
      enableTlsRenegotiation:
      # -- Optional, but forbidden if `removeProtocols` is used.
      # Specifies one or more protocols allowed for the TLS/SSL interaction,
      # among the ones supported by the underlying Security Provider.
      # For Oracle JVMs, the available names are the "SSLContext Algorithms"
      # listed here:
      # https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#sslcontext-algorithms
      # If not specified, the `removeProtocols` setting is considered; hence, 
      # if `removeProtocols` is also not used, all protocols enabled by the 
      # Security Provider will be available.
      # @default -- []
      allowProtocols: []
        # - TLSv1.2
        # - TLSv1.3
      # -- Optional, but forbidden if `allowProtocols` is used.
      # Pattern to be matched against the names of the enabled TLS/SSL 
      # protocols in order to remove the matching ones from the enabled 
      # protocols set.
      # Any pattern in java.util.regex.Pattern format can be specified.
      # This allows for customization of the choice of the TLS/SSL protocols to
      # be used for an incoming https connection (note that reducing the set of
      # available protocols may cause some client requests to be refused).
      # Note that the selection is operated on the default set of the protocols
      # "enabled" by the Security Provider, not on the wider set of the
      # "supported" protocols. The default set of the "enabled" protocols is
      # logged at startup by the `lightstreamerLogger.io.ssl` logger at DEBUG
      # level.
      # @default -- []
      removeProtocols:
        - SSL
        - TLSv1$
        - TLSv1.1
      # -- Optional. Instructs the underlying Security Provider on whether to
      # use stateless (when `true`) or stateful (when `false`) session
      # resumption on this port, if supported (possibly depending on the
      # protocol version in use).
      # Note that stateful resumption implies the management of a TLS session
      # cache, whereas stateless resumption is slightly more demanding in terms
      # of CPU and bandwidth.
      # Note, however, that this setting is currently supported only if the
      # Conscrypt Security Provider is used. For instance, with the default
      # SunJSSE Security Provider, the use of stateful or stateless resumption
      # can only be configured at global JVM level, through the
      # `jdk.tls.server.enableSessionTicketExtension` JVM property.
      # If not specified, the type of resumption will be decided by the 
      # underlying Security Provider, based on its own configuration.
      # @default -- the underlying Security Provider's configuration.
      enableStatelessTlsSessionResumption:
      # -- Optional. Size of the cache used by the TLS implementation to handle
      # TLS session resumptions when stateful resumption is configured (see
      # `enableStatelessTlsSessionResumption`). 
      # A value of `0` poses no size limit.
      # Note, however, that the underlying Security Provider may ignore this
      # setting (possibly depending on the protocol version in use).
      # If not specified, the cache size is decided by the underlying Security 
      # Provider. For the default SunJSSE, it is `20480` TLS sessions, unless
      # configured through the  `javax.net.ssl.sessionCacheSize` JVM property.
      # @default -- decided by the underlying Security Provider's configuration
      tlsSessionCacheSize:
      # -- Optional. Maximum time in which a TLS session is kept available to
      # the client for resumption. This holds for both stateless and stateful
      # TLS resumption (see `enableStatelessTlsSessionResumption`).
      # In the latter case, the session also has to be kept in a cache.
      # A value of 0 poses no time limit.
      # Note, however, that the underlying Security Provider may ignore this
      # setting (possibly depending of the protocol version in use).
      # @default -- the maximum time is decided by the underlying Security
      # Provider. For the default SunJSSE, it is 86400 seconds, unless
      # configured through the "jdk.tls.server.sessionTicketTimeout" JVM
      # property.
      tlsSessionTimeoutSeconds:
      # -- Optional. If set to `true`, tries to improve the TLS session
      # resumption feature by providing the underlying Security Provider with
      # information on the client IPs and ports. This makes sense only if
      # client IPs can be determined (see `servers.{}.clientIdentification`).
      # @default -- false
      enableClientHintsForTlsSessionResumption:
      # -- Optional. Request to provide the Metadata Adapter with the
      # "principal" included in the client TLS/SSL certificate, when available.
      # If set to `true`, upon each client connection, the availability of a
      # client TLS/SSL certificate is checked. If available, the included
      # identification data will be supplied upon calls to notifyUser.
      # If set to `false`, no certificate information is supplied to notifyUser
      # and no check is done on the client certificate.
      # Note that a check on the client certificate can also be requested
      # through `enableMandatoryClientAuth`.
      # @default -- false
      enableClientAuth:
      # -- Optional. Request to only allow clients provided with a valid
      # TLS/SSL certificate.
      # If set to `true`, upon each client connection, a valid TLS/SSL
      # certificate is requested to the client in order to accept the
      # connection.
      # If set to `false`, no check is done on the client certificate.
      # Note that a certificate can also be requested to the client as a
      # consequence of `enableClientAuth`.
      # @default -- false
      enableMandatoryClientAuth:
      # -- Mandatory when at least one of `enableClientAuth` and
      # `enableMandatoryClientAuth` is set to `true`. The reference to a
      # keystore to be used by the HTTPS service to accept client certificates.
      # It can be used to supply client certificates that should be accepted,
      # in addition to those with a valid certificate chain, for instance while
      # testing with self-signed certificates.
      # See the `keyStores.myServerKeystore` settings for general details on
      # keystore configuration.
      # Note that the further constraints reported there with regard to
      # accessing the certificates in a JKS keystore don't hold in this
      # case, where the latter is used as a truststore.
      # Moreover, the handling of keystore replacement doesn't apply here.
      trustStoreRef:

# -- Keystores definition.
keyStores:
  # -- Keystore definition used by HTTPS server socket configurations.
  # The default values used here reference the JKS keystore file
  # "myserver.keystore", which is provided out of the box (and stored in the
  # `myserver-keystore-secret` secret, along with the password stored in the
  # `myserver-keypass-secret` secret), and obviously contains an invalid
  # certificate. In order to use it for your experiments, remember to add a
  # security exception to your browser.
  myServerKeystore:
    # -- (string) Optional. The keystore type.
    # The currently supported types are:
    # - JKS, which is the Sun/Oracle's custom keystore type, whose support is
    #   made available by every Java installation;
    # - PKCS12, which is supported by all recent Java installations;
    # - PKCS11, which as a bridge to an external PKCS11 implementation;
    #   this is an experimental extension; contact Lightstreamer Support for
    #   details.
    # @default -- JKS
    type: JKS
    # -- Mandatory if type is set to `JKS` or `PKCS12`. Secret name and key
    # where the keystore file is stored.
    keystoreFileSecretRef:
      name: myserver-keystore-secret
      key: myserver.keystore
    # -- Mandatory if type is set to `JKS` or `PKCS12`. Secret name and key
    # where keystore password is stored.
    keystorePasswordSecretRef:
      name: myserver-keypass-secret
      key: myserver.keypass
  # -- Example of Keystore definition used by Kafka connector configurations.
  myKafkaConnectorKeystore:
    # -- (string) Optional. The keystore type.
    # The currently supported types are:
    # - JKS, which is the Sun/Oracle's custom keystore type, whose support is
    #   made available by every Java installation;
    # - PKCS12, which is supported by all recent Java installations;
    # @default -- "JKS"
    # type: JKS
    # -- Mandatory if type is set to `JKS` or `PKCS12`. Secret name and key
    # where the keystore file is stored.
    # keystoreFileSecretRef:
      # name: kafka-connector-keystore-secret
      # key: kafka-connector.keystore.jks
    # -- Mandatory if type is set to `JKS` or `PKCS12`. Secret name and key
    # where the keystore password is stored.
    # keystorePasswordSecretRef:
      # name: kafka-connector-keypass-secret
      # key: kafka-connector.keypass
    # -- Optional. Secret name and key where the password of the private key
    # in the keystore is stored.
    # keyPasswordSecretRef:
      # name: kafka-connector-private-key-pass-secret
      # key: kafka-connector.private.key.pass

# -- Mandatory. Global socket configuration
globalSocket:
  # -- (int) (Mandatory) Longest inactivity time accepted while waiting for a
  # slow request to be received. If this value is exceeded, the socket is
  # closed. Reusable HTTP connections are also closed if they are not reused
  # for longer than this time.
  # The time actually considered may be approximated and may be a few seconds
  # higher, for internal performance reasons.
  # A 0 value suppresses the check.
  readTimeoutMillis: 20000
  # -- (int) Optional. Longest inactivity time accepted while waiting for a
  # slow operation during a TLS/SSL handshake. This involves both reads,
  # writes, and encryption tasks managed by the "TLS-SSL HANDSHAKE" or
  # "TLS-SSL AUTHENTICATION" internal pools. If this value is exceeded, the
  # socket is closed.
  # The time actually considered may be approximated and may be a few seconds
  # higher, for internal performance reasons.
  # A 0 value suppresses the check.
  # @default -- 4000
  handshakeTimeoutMillis:
  # -- (int) Optional. Maximum length in bytes accepted for a request.
  # For an HTTP GET request, the limit applies to the whole request, including
  # the headers.
  # For an HTTP POST request, the limit applies to the header part and the body
  # part separately.
  # For a request over a WebSocket, the limit applies to the request message
  # payload.
  # @default -- unlimited length
  requestLimit: 50000
  # -- Optional. Longest operation time accepted while writing data on a
  # socket. If this value is exceeded, the socket is closed. Note that this may
  # also affect very slow clients.
  # The time actually considered may be approximated and may be a few seconds
  # higher, for internal performance reasons.
  # If missing or 0, the check is suppressed.
  # @default -- the check is suppressed
  writeTimeoutMillis: 120000
  # -- (string) Optional. Enabling the use of the full HTTP 1.1 syntax for all
  # the responses, upon HTTP 1.1 requests.
  # If set to `1.1`, HTTP 1.1 is always used, when possible.
  # If set to `1.0`, HTTP 1.0 is always used; this is possible for all HTTP
  # requests, but it will prevent WebSocket support.
  # If set to `AUTO`, HTTP 1.0 is used, unless HTTP 1.1 is required in order to
  # support specific response features.
  # @default -- 1.1
  useHttpVersion:
  # -- Optional. WebSocket support configuration
  webSocket:
    # -- Optional. Enabling of the WebSocket support.
    # If set to `true`, the Server accepts requests for initiating a WebSocket
    # interaction through a custom protocol.
    # If set to `false`, the Server refuses requests for WebSocket interaction.
    # Disabling WebSocket support may be needed when the local network
    # infrastructure (for instance the Load Balancer) does not handle WebSocket
    # communication correctly and the WebSocket transport is not already
    # disabled on the client side through the Lightstreamer Client Library in
    # use. The Client Library, upon the Server refusal, will resort to HTTP
    # streaming without any additional delay to session establishment.
    # @default -- true
    enabled:
    # -- (int) Optional. Maximum time the Server is allowed to wait before
    # answering to a client "ping" request. In case a client sends very
    # frequent "ping" requests, only the "pong" associated to the most recent
    # request received is sent, while the previous requests will be ignored.
    # Note that the above is possible also when 0 is specified.
    # @default -- 0
    maxPongDelayMillis:
    # -- (int) Optional. Maximum time the Server is allowed to wait for the
    # client "close" frame, in case the Server is sending its own close" frame
    # first, in order to try to close the connection in a clean way.
    # @default -- no timeout is set and the global `global.readTimeoutMillis` applies
    maxClosingWaitMillis:
    # -- Optional.  Maximum payload size allowed for an outbound frame.
    # When larger updates have to be sent, the related WebSocket messages will
    # be split into multiple frames.
    # A lower limit for the setting may be enforced by the Server.
    # @default -- 16384
    maxOutboundFrameSize:

# -- Security configuration
security:
  # -- Optional. Disabling of the protection for JavaScript pages, supplied by
  # the Server, that carry user data.
  # JavaScript pages can be supplied upon requests by old versions of the Web
  # and Node.js (Unified API) Client Libraries, whereas recent versions no
  # longer make use of this kind of pages. The protection prevents such pages
  # from being imported in a <script> block and, as a consequence, from being
  # directly executed within a hosting page regardless of its origin.
  # This protection allows the Server to fully comply with the prescriptions to
  # prevent the so-called "JavaScript Hijacking".
  # If set to `true`, the protection is enabled.
  # If set to `false`, the protection is disabled. It can be set in order to
  # support communication between the application front-end pages and
  # Lightstreamer Server in specific use cases; see the Client Guide for the
  # Web (Unified API) Client SDK earlier than 8.0.0 for details. It can also be
  # set in order to ensure compatibility with even older Web Client Libraries
  # (version 4.1 build 1308 or previous). Note, however, that basic protection
  # against JavaScript Hijacking can still be granted, simply by ensuring that
  # request authorization is never based on information got from the request
  # cookies. This already holds for any session-related request other than
  # session-creation ones, for which the request URL is always checked against
  # the Server-generated session ID. For session-creation requests, this
  # depends on the Metadata Adapter implementation, but can be enforced by
  # setting `enableForwardCookies` to `false`.
  # @default -- true
  enableProtectedJs: false
  # -- Optional. Use this setting to enable the forwarding of the cookies to
  # the Metadata Adapter through the httpHeaders argument of the "notifyUser"
  # method.
  # Please note that in any case cookies should not be used to authenticate
  # users, otherwise, having `enableProtectedJs` set to `false` and/or a too
  # permissive policy in the `crossDomainPolicy` will expose the server to CSRF
  # attacks.
  # If set to `true`, cookies are forwarded to the Metadata Adapter.
  # If set to `false`, cookies are hidden from the Metadata Adapter.
  # @default -- false
  enableCookiesForwarding: false
  # -- Optional. List of origins to be allowed by the browsers to consume
  # responses to requests sent to this Server through cross-origin XHR or
  # through WebSockets; in fact, when a requesting page asks for streaming data
  # in this way, the browser should specify the page origin through the
  # "Origin" HTTP header, to give the Server a chance to accept or refuse the
  # request. This is the most common way streaming data is requested by the Web
  # (Unified API) Client Library. You can see the Client Guide for the Web
  # (Unified API) Client SDK earlier than 8.0.0 for details on all the possible
  # use cases.
  # If a request origin is not matched against any of the configured rules, a
  # Websocket initiation request will be refused, whereas a HTTP request will
  # not be denied (i.e.: a 200 OK will be returned) but the response body will
  # be left empty, in accordance with the CORS specifications.
  # If no origin is specified by the user-agent, the request will always be
  # accepted.
  # Note that sending the Origin header is a client-side duty. In fact, most
  # modern browsers, upon a request for a cross-origin XHR or WebSocket by a
  # page, will send the Origin header, while older browsers will directly fail
  # to send the request. Non-browser clients usually don't have to perform
  # origin checks; so they don't send the Origin header and thus their requests
  # are always authorized.
  crossDomainPolicy:
    # -- Optional. In case an HTTP OPTIONS request is sent to authorize future
    # requests, the server allows the client to store the result of such
    # OPTIONS for the specified number of seconds. Thus a previously authorized
    # client may not give up its authorization, even if the related origin is
    # removed from the list and the server is restarted, until its
    # authorization expires.
    # @default `3600`
    optionsMaxAgeSeconds: 3600
    # -- Optional. In case the client wishes to send custom headers to the
    # server, it requires approval from the server itself. This setting
    # permits to specify a comma separated list of extra headers to be allowed
    # in the client requests. Note that a space is expected after each comma
    # (e.g.: `acceptExtraHeaders: "custom-header1, custom-header2"`).
    # @default -- ""
    acceptExtraHeaders:
    # -- Optional. Specify f the server should authorize the client to send its
    # credentials on a CORS request. This setting does not impact the
    # user/password sent over the Lightstreamer protocol,but, if set to
    # `false`, might prevent, or force a fallback connection, on clients
    # sending CORS requests carrying cookies, http-basic-authentication or
    # client-side certificates.
    # @default -- false
    acceptCredentials: true
    # -- Optional. List of Origin allowed to consume responses to cross-origin
    # requests.
    allowAccessFrom:
      # -- Optional. Defines a rule against which Origin headers will be
      # checked.
      fromEveryWere:
        # -- Mandatory. A valid scheme name (usually http or https) or `*`; the
        # latter matches both http and https scheme, but it doesn't match other
        # schemes.
        scheme: "*"
        # -- Mandatory. A valid host name, IPv4 or IPv6 representing, an
        # authorized Origin. Also a `*` is accepted with the meaning of
        # "any host or IP".
        # If a host name is specified it can be prefixed with a wildcard as
        # long as at least the second level domain is explicitly specified
        # (i.e.:*.my-domain.com and *.sites.my-domain.com are valid entries
        # while *.com is not)
        host: "*"
        # -- Mandatory. A a valid port or `*` to specify any port.
        port: "*"
      # fromWwwMyDomain:
      #   scheme: https
      #   host: "www.my-domain.com"
      #   port: 443
      # fromMyDomain:
      #   scheme: https
      #   host: "*.my-domain.com"
      #   port: 443
      # fromLocal:
      #   scheme: https
      #   host: "192.168.0.101"
      #   port: "*"
      # fromHttpsIpv6:
      #   scheme: https
      #   host: "2001:0db8:aaaa:0000:0000:dddd:eeee:0000"
      #   port: 443
      # fromIpvs:
      #   scheme: "*"
      #   host: "2001:0db8:aaaa::dddd:eeee:0"
      #   port: "*"
    # -- Optional. List of Origin domains or subdomains to be allowed by the
    # browsers to access data on HTML pages supplied by this Server.
    # This was one of the ways used by the Web (Unified API) Client SDK earlier
    # than 8.0.0 to request streaming data; see the Client Guide for these Web
    # (Unified API) Client SDK versions for details on which use cases involve
    # accessing data through HTML pages.
    # In this kind of requests, the requesting page should be allowed by the
    # browser to access data contained in the Server-originated page only if
    # both pages declare a common subdomain. So, the page should declare a
    # subdomain as its "document.domain" property and will ask the Server to
    # declare the same subdomain on the response page.
    # In that case, the Server will be allowed to set the requested subdomain
    # as the "document.domain" property of the data page only if configured
    # here, otherwise the whole request will be refused.
    # On the other hand, if no setting is provided, then this check is
    # disabled. Note that, in any case, the consistency of the declared
    # subdomain with the url used to request the data page must be ensured by
    # the browser.
    # If the requesting page doesn't specify any subdomain for the response,
    # the request will always be allowed; in this case, a same-domain access to
    # the Server data page will be performed by the browser.
    # @default -- []
  allowedDomains: []
    # - "my-domain.com"
    # - "my-alt-domain.com"
  # -- (string) Optional. Server identification policy to be used for all
  # server responses. Upon any HTTP request, the Server identifies itself
  # through the "Server" HTTP response header. However, omitting version
  # information may make external attacks more difficult.
  # If set to `FULL`, the Server identifies itself as:
  # Lightstreamer Server/X.Y.Z build BBBB (Lightstreamer Push Server -
  # www.lightstreamer.com) EEEEEE edition.
  # If set to `MINIMAL`, the Server identifies itself, depending on the
  # Edition: for Enterprise edition, as Lightstreamer Server; for Community
  # edition, as Lightstreamer Server (Lightstreamer Push Server -
  # www.lightstreamer.com) COMMUNITY edition.
  # @default -- FULL
  serverIdentificationPolicy:

# -- Mandatory. Logging and management configuration
management:
  # -- Optional. A set of Clients whose activity is not to be logged.
  # @default -- []
  noLoggingIpAddresses: []
    # - "20.0.0.10"
  # -- Optional. Enabling of the inclusion of the user password in the log of
  # the client requests for new sessions, performed by the
  # `lightstreamerLogger.requests` logger at `INFO` level.
  # If set to `true`, the whole request is logged.
  # If set to `false`, the request is logged, but for the value of the
  # `LS_password` request parameter.
  # Note that the whole request may still be logged by some loggers, but only
  # at `DEBUG` level, which is never enabled in the default configuration.
  # @default -- false
  enablePasswordVisibilityOnRequestLog:
  # -- (int) Optional. Threshold time for long Adapter call alerts.
  # All Data and Metadata Adapter calls should perform as fast as possible, to
  # ensure that client requests are accomplished quickly.
  # Slow methods may also require that proper thread pools are configured.
  # Hence, all invocations to the Adapters (but for the initialization phase)
  # are monitored and a warning is logged whenever their execution takes more
  # than this time.
  # A 0 value disables the check.
  # @default -- 1000
  unexpectedWaitThresholdMillis: 0
  # -- (int) Optional. Threshold time for long asynchronous processing alerts.
  # Data and Metadata Adapter calls, even when performed through asynchronous
  # invocations (where available), should still take a reasonable time to
  # complete. This is especially important if limits to the number of
  # concurrent tasks are set; moreover, tasks forgotten for any reason and
  # never completed may cause a memory leak.
  # Hence, the longest current execution time is periodically sampled by the
  # Server Monitor on each pool and, whenever it exceeds this threshold on a
  # pool, a warning is logged. Note that warning messages can be issued
  # repeatedly. A 0 value disables the check.
  # @default -- 10000
  asyncProcessingThresholdMillis: 60000
  # -- (int) Optional. Threshold wait time for a task enqueued for running on
  # any of the internal thread pools.
  # The current wait time is periodically sampled by the Server Monitor on each
  # pool and, whenever it exceeds this threshold on a pool, a warning is
  # logged. Note that warning messages can be issued repeatedly. A 0 value
  # disables the check.
  # @default -- 10000
  maxTaskWaitMillis:
  # -- (int) Mandatory. Sampling time for internal load statistics (Server
  # Monitor). These statistics are available through the JMX interface; some of
  # these statistics are logged bt the Internal Monitor log or can be
  # subscribed to through the internal Monitoring Adapter Set.
  # Full JMX features is an optional feature, available depending on Edition
  # and License Type.
  collectorMillis: 2000
  # -- Mandatory (if you wish to use the provided "stop" script).
  # JMX preferences and external access configuration.
  # Full JMX features is an optional feature, available depending on Edition
  # and License Type; if not available, only the Server shutdown operation via
  # JMX is allowed. To know what features are enabled by your license, please
  # see the License tab of the Monitoring Dashboard (by default, available at
  # /dashboard).
  jmx:
    # -- Mandatory (if you wish to use the provided "stop" script).
    # Enables the standard RMI connector.
    # The remote MBean server will be accessible through this url:
    # "service:jmx:rmi:///jndi/rmi://<host>:<port>/lsjmx".
    # If full JMX features is not available, only the "Server" MBean is
    # supplied and only the Server shutdown operation is available.
    # The JVM platform MBean server is also exposed and it is accessible
    # through the url: "service:jmx:rmi:///jndi/rmi://<host>:<port>/jmxrmi".
    # Note that the configuration of the connector applies to both cases;
    # hence, access to the JVM platform MBean server from this connector is not
    # configured through the "com.sun.management.jmxremote" JVM properties.
    # Also note that TLS/SSL is an optional feature, available depending on
    # Edition and License Type. To know what features are enabled by your
    # license, please see the License tab of the Monitoring Dashboard (by
    # default, available at /dashboard).
    rmiConnector:
      # -- Mandatory. TCP port on which the RMI connector will be available.
      # This is the port that has to be specified in the client access url.
      # The optional `enableSsl` setting, when set to `true`, enables
      # TLS/SSL communication. Note that this case is not managed by some JMX
      # clients, like jconsole.
      port:
        value: 8888
        enableSsl: false
      # -- Optional. TCP port that will be used by the RMI connector for its
      # own communication stuff. The port has not to be specified in the client
      # access url, but it may have to be considered for firewall settings.
      # The optional `enableSsl` setting, when set to `false`, enables TLS/SSL
      # communication by the connector; TLS/SSL at this level is supported by
      # some JMX clients, like jconsole, that don't supportTLS/SSL on the main
      # port.
      # @default -- the same as config used in `rmiConnector.port`
      dataPort:
        # value: 4444
        # enableSsl: false
      # -- (string) Optional. A hostname by which the RMI Server can be reached
      # from all the clients. In fact, the RMI Connector, for its own 
      # communication stuff, does not use the hostname specified in the client 
      # access url, but needs an explicit server-side configuration.
      # Note that, if you wish to use the provided "stop" script, the specified
      # hostname has to be visible also from local clients.
      # @default -- any setting provided to the "java.rmi.server.hostname" JVM
      # property
      hostName:
      # -- Optional. Enabling of a preliminary test on the reachability of the 
      # RMI Server through the configured hostname. Note that the reachability 
      # is not needed for the Server itself, so the test is only for the 
      # benefit of other clients, including the "stop" script; but, since other
      # clients may be run in different environments, the outcome of this test
      # may not be significant.
      # If set to `true`, enables the test; if the test fails, the whole Server
      # startup will fail. If successful and the "stop" script is launched in
      # the same environment of the Server, the script should work.
      # If set to `false`, disables the test, but this setting can be
      # overridden by setting jmx.enableStoppingServiceCheck to `true`.
      # @default -- true
      enableTestPorts: true
      # -- (int) Optional. Timeout to be posed on the connection attempts 
      # through the RMI Connector. If 0, no timeout will be posed.
      # The setting affects:
      # - The reachability test (if enabled through <test_ports>).
      # - The connector setup operation; in fact this operation may involve a
      #   connection attempt, whose failure, however, would not prevent the
      #   setup from being successful. If the configured hostname were not
      #   visible locally, the setup might take long time; by setting a
      #   timeout, the operation would not block the whole Server startup.
      #   However, the RMI Connector (and the "stop" script) might not be
      #   available immediately after the startup, and any late failure
      #   preventing the connector setup would be ignored.
      # On the other hand, the setting is ignored by the "stop" script.
      # @default -- 0
      testTimeoutMillis: 5000
      # -- (string) Optional. Can be used on a multihomed host to specify the
      # IP address to bind the HTTP/HTTPS server sockets to, for all the
      # communication.
      # Note that, when a listening interface is configured and depending on
      # the local network configuration, specifying a suitable
      # `rmiConnector.hostname` setting may be needed to make the connector
      # accessible, even from local clients.
      # @default -- accept connections on any/all local addresses
      listeningInterface:
        # -- Mandatory if either `port.enableSsl` or `dataPort.enableSsl` is set 
        # to true. The reference to a keystore configuration (defined in 
        # `keystore`) to be used in case TLS/SSL is enabled for part or all of 
        # the communication.
      # See the `keystores.myServerKeystore` for general details on keystore
      # configuration. These include the runtime replacement of the keystore,
      # with one difference: if the load of the new keystore fails, the RMI
      # Connector may be left unreachable.
      # @default -- any settings provided to the `javax.net.ssl.keyStore` and
      # `javax.net.ssl.keyStorePassword` JVM properties will apply
      keyStoreRef:
      # -- (list) Optional, but forbidden if `removeCipherSuites` is used.
      # Specifies all the cipher suites allowed for the interaction, in case
      # TLS/SSL is enabled for part or all the communication.
      # See notes for `servers.{}.sslConfig.allowCipherSuites`.
      # @default -- []
      allowCipherSuites: []
        # - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
      # -- (list) Optional, but forbidden if `allowCipherSuites` is used.
      # Pattern to be matched against the names of the enabled cipher suites in
      # order to remove the matching ones from the enabled cipher suites set to
      # be used in case TLS/SSL is enabled for part or all the communication.
      # See notes for `servers.{}.sslConfig.removeCipherSuites`.
      # @default -- []
      removeCipherSuites: []
        # - TLS_RSA_
      # -- Optional. Determines which side should express the preference when
      # multiple cipher suites are in common between server and client (in case
      # TLS/SSL is enabled for part or all the communication).
      # See notes for
      # `servers.{}.sslConfig.enforceServerCipherSuitePreference`.
      enforceServerCipherSuitePreference:
        enabled: true
        order: "JVM"
      # -- (list) Optional, but forbidden if `removeProtocols` is used.
      # Specifies one or more protocols allowed for the TLS/SSL interaction, in
      # case TLS/SSL is enabled for part or all the communication.
      # See notes for `servers.{}.sslConfig.allowProtocols`.
      allowProtocols: []
        # - TLSv1.2
        # - TLSv1.3
      # -- (list) Optional, but forbidden if `allowProtocols` is used.
      # Pattern to be matched against the names of the enabled TLS/SSL
      # protocols in order to remove the matching ones from the enabled
      # protocols set to be used in case TLS/SSL is enabled for part or all the
      # communication.
      # See notes for `servers.{}.sslConfig.removeProtocols.
      removeProtocols:
        - SSL
        - TLSv1$
        - TLSv1.1
      # -- Optional. Enabling of the RMI connector access without credentials.
      # If set to `true`, requests to the RMI connector are always allowed.
      # If set to `false`, requests to the RMI connector are subject to user
      # authentication; the allowed users are set in the "user" elements.
      # @default -- false
      enablePublicAccess:
      # -- (list) Optional, but ineffective if `enablePublicAccess` is set to 
      # `true`. The reference to the secrets containing the credentials of the 
      # users enabled to access the RMI connector.
      # Every secret must contains the keys `user` and `password`.
      # If `enablePublicAccess` is set to `false`, at least one set of
      # credentials should be supplied in order to allow access through the
      # connector.
      # This is also needed if you wish to use the provided "stop" script; the
      # script will always use the first user supplied.
      # @default -- []
      credentialsSecrets:
    # -- Optional. JMXMP connector configuration.
    # The connector is supported by the Server only if Sun/Oracle's JMXMP
    # implementation library is added to the Server classpath; see README.TXT
    # in the JMX SDK for details.
    # The remote server will be accessible through the url:
    # "service:jmx:jmxmp://<host>:<jmxmpConnector.port>".
    jmxmpConnector:
      # -- Optional. Enables Sun/Oracle's JMXMP connector.
      # @default -- false
      enabled:
      # -- (int) Mandatory if enabled is set to `true`. TCP port on which
      # Sun/Oracle's JMXMP connector will be listening. This is the port that
      # has to be specified in the client access url.
      port:
    # -- (string) Optional. Enabling of the availability of session-related
    # mbeans, the  ones identified by type="Session".
    # If set to `active`, for each active session, a corresponding mbean of
    # type "Session" is available with full functionality.
    # If set to `sampled_statistics_only`, for each active session, a
    # corresponding mbean of type "Session" is available, but all the statistics
    # based on periodic sampling are disabled.
    # If set to `inactive`, no mbeans of type "Session" are generated, but for
    # a fake mbean which acts as a reminder that the option can be enabled.
    # The support for session-related mbeans can pose a significant overload on
    # the Server when many sessions are active and many of them are
    # continuously created and closed. For this reason, the support is disabled
    # by default.
    # @default -- inactive
    sessionMbeanAvailability:
    # -- Optional. Enabling of all properties provided by the various MBeans.
    # This flag could potentially cause MBeans to return extremely long lists.
    # In act, various JMX agents extract the property values from the MBeans
    # altogether; but extremely long values may clutter the agent and prevent
    # also the acquisition of other properties. This issue may also affect the
    # JMX Tree.
    # For all these properties, corresponding operations are also provided.
    # If set to `true`, all list properties are enabled; in some cases, their
    # value may be an extremely long list; consider, for instance,
    # 'CurrentSessionList' in the ResourceMBean.
    # If set to `false`, properties that can, potentially, return extremely long
    # lists won't yield the correct value, but just a reminder text; for
    # instance, this applies to 'CurrentSessionList' in the ResourceMBean.
    # @default -- true
    enableLongListProperties: false
  # -- Optional. Startup check that the conditions for the correct working of
  # the provided "stop" script are met (see `jmx`).
  # If set to `true`, the startup will wail if the JMX RMI connector is not
  # configured or the ServerMBean cannot bet started. This also enforces the
  # check of the JMX port reachability ( see `rmiConnector.enableTestPorts`
  # and the remarks on the test effectiveness); if the test fails, the
  # startup will also fail.
  # If set to `false`, no check is made that the "stop" script should work.
  # This may not be a problem, because the Server can be stopped in other
  # ways. The provided installation scripts also close the Server without
  # resorting to the "stop" script.
  # @default -- false
  enableStoppingServiceCheck:
  # -- Optional. Configuration of the Monitoring Dashboard.
  # The dashboard is a webapp whose pages are embedded in Lightstreamer Server
  # and supplied by the internal web server. The main page has several tabs,
  # which provide basic monitoring statistics in graphical form; the last one
  # shows the newly introduced JMX Tree, which enables JMX data view and
  # management from the browser.
  # The Dashboard leans on an internal Adapter Set, named "MONITOR".
  # The following settings configure access restrictions to Monitoring Dashboard
  # pages.
  # *** IMPORTANT *** The Monitoring Dashboard enables data view and
  # management, including the Server shutdown operation, from a remote browser.
  # We recommend configuring the credentials and protecting them by making the
  # Monitoring Dashboard only available on https server sockets through the
  # settings below. Further restrictions can be applied to the JMX Tree only.
  # See PRODUCTION_SECURITY_NOTES.TXT for a full check-list.
  # Note that basic monitoring statistics are also available to any
  # Lightstreamer application; in fact, an instance of a special internal
  # monitoring Data Adapter can be embedded in any custom Adapter Set, by
  # specifying "MONITOR" in place of the Data Adapter class name.
  # For a listing of the supplied items, see the General Concepts document.
  # The `dashboard.enableHostnameLookup` setting below also affects the
  # monitoring Data Adapter. On the other hand, access restrictions to a
  # monitoring Data Adapter instance embedded in a custom Adapter Set is only
  # managed by the custom Metadata Adapter included.
  dashboard:
    # -- Optional. Enabling of the requests for the JMX Tree page, which is
    # part of the Monitoring Dashboard.
    # This page, whose implementation is based on the "jminix" library, enables
    # JMX data view and management, including the Server shutdown operation,
    # from the browser.
    # If set to `true`, the Server supports requests for JMX Tree pages, though
    # further fine-grained restrictions may also apply.
    # If set to `false`, the Server ignores requests for JMX Tree pages,
    # regardless of the credentials supplied and the server socket in use; the
    # dashboard tab will just show a "disabled page" notification.
    # @default -- false
    enableJmxTree: true
    # -- Optional. Enabling of the access to the Monitoring Dashboard pages
    # without credentials.
    # If set to `true`, requests for the Monitoring Dashboard are always
    # accepted.
    # If set to `false`, requests for the Monitoring Dashboard are subject to a
    # check for credentials to be specified through the `users` settings;
    # hence, a user credential submission dialog may be presented by the
    # browser. If no "users" settings is defined, the Monitoring Dashboard will
    # not be accessible in any way.
    # @default -- false
    enablePublicAccess:
    # -- Optional, but ineffective if `enablePublicAccess` is set to `true`.
    # Credentials of the users enabled to access the Monitoring Dashboard.
    # If `enablePublicAccess` is set to `false`, at least one set of 
    # credentials should be supplied in order to allow access through the
    # connector.
    # @default -- []
    credentials:
      - # -- The reference to the secret containing the credentials of the user
        # enabled to access the Monitoring Dashboard.
        # The secret must contain the keys `user` and `password`.
        secretRef:
        # - Optional, but effective only if `dashboard.enableJmxTree` is set to
        # `true`. Allows allows for restriction of the access to the JMX Tree
        # on a user basis.
        # @default -- true
        enableJmxTreeVisibility:
    # -- Optional. Enabling of the access to the Monitoring Dashboard pages
    # through all server sockets.
    # If set to `true`, requests to the Monitoring Dashboard can be issued
    # through all the defined server sockets.
    # If set to `false`, requests to the Monitoring Dashboard can be issued
    # only through the server sockets specified in the `availableOnServers`
    # setting, if any; otherwise, requests to the dashboard url will get a
    # "page not found" error. If no `availableOnServers` setting is defined,
    # requests to the Monitoring Dashboard will not be possible in any way.
    # Disabling the Dashboard on a server socket causes the internal "MONITOR"
    # Adapter Set to also become unavailable from that socket. This does not
    # affect in any way the special "MONITOR" Data Adapter.
    # @default -- false
    enableAvailabilityOnAllServers: true
    # -- Optional, but ineffective if `enableAvailabilityOnAllServers` is set
    # to `true`. List of server socket configurations (defined in `servers.{}`
    # for which requests to the Monitoring Dashboard will be allowed.
    availableOnServers:
      - # -- Mandatory. The reference to the allowed server socket 
        # configuration.
        serverRef:
        # - Optional, but effective only if `dashboard.enableJmxTree` is set to
        # `true`. Allows allows for restriction of the access to the JMX Tree
        # on a TCP port basis.
        # @default -- true
        enableJmxTreeVisibility:
    # -- (string) Optional. URL path to map the Monitoring Dashboard pages to.
    # An absolute path must be specified.
    # @default -- /dashboard
    urlPath:
    # -- Optional. Enabling of the reverse lookup on Client IPs and inclusion
    # of the Client hostnames while monitoring client activity.
    # This setting affects the Monitor Console page and also affects any
    # instance of the monitoring Data Adapter embedded in a custom Adapter Set.
    # If set to `true`, the Client hostname is determined on Client activity
    # monitoring; note that the determination of the client hostname may be
    # heavy for some systems.
    # If set to `false`, no reverse lookup is performed and the Client hostname
    # is not included on Client activity monitoring.
    # @default -- false
    enableHostnameLookup:
  # -- Optional. Configuration of the "/lightstreamer/healthcheck" request url,
  # which allows a load balancer to test for Server responsiveness to external
  # requests. The Server should always answer to the request with the `OK\r\n`
  # content string (unless overridden through e JMX interface). The Server may
  # log further information to the dedicated `lightstreamerHealthCheck` logger.
  # Support for clustering is an optional feature, available depending on
  # Edition and License Type.
  healthCheck:
    # -- Optional. Enabling of the healthcheck url on all server sockets.
    # If set to `true`, the healthcheck request can be issued through all the
    # defined server sockets.
    # If set to `false`, the healthcheck request can be issued only through the
    # server sockets specified in the "availableOnServers" setting, if any.
    # @default -- false
    enableAvailabilityOnAllServers: true
    # -- Optional, but ineffective if `enableAvailabilityOnAllServers` is set
    # to `false`. List of server socket configurations (defined in 
    # `servers.{}`) for which healthcheck requests can be issued.
    # @default -- []
    availableOnServers: []

# -- Mandatory. Push session configuration
pushSession:
  # -- Optional. If used, defines one or multiple alternative url paths for all
  # requests related to the streaming services, which will be composed by the
  # specified prefix followed by /lightstreamer.
  # Then it will be possible to instruct the Unified Client SDKs to use an
  # alternative path by adding its prefix to the supplied Server address.
  # The specified path prefixes must be absolute.
  # Note that, regardless of this setting, the standard path, which is
  # /lightstreamer, is always active.
  # By supporting dedicated paths, it becomes possible to address different
  # Server installations with the same hostname, by instructing an intermediate
  # proxy to forward each client request to the proper place based on the
  # prefix, even if the prefix is not stripped off by the proxy.
  # However, this support does not apply to the Internal Web Server and to the
  # Monitoring Dashboard.
  # @default -- []
  serviceUrlPrefixes: []
  # -- Mandatory. Maximum size of HTTP streaming responses; when the maximum
  # size is reached, the connection is closed but the session remains active
  # and the Client can continue listening to the item update events by binding
  # the session to another connection.
  # This setting is also used as the maximum length allowed for poll responses;
  # if more data were available, they would be kept for the next poll request.
  # The Setting is not used for streaming responses over WebSockets.
  # The optimal content-length for web clients (i.e. browser user agents)
  # should not be too high, in order to reduce the maximum allocated memory on
  # the client side. Also note that some browsers, in case of a very high
  # content-length, may reduce streaming capabilities (noticed with  IE8 and
  # 4GB).
  # This setting can be overridden by the Clients (some LS client libraries
  # actually set their own default).
  # The lowest possible value for the content-length is decided by the Server,
  # so as to allow the connection to send a minimal amount of data.
  contentLength:
    # -- (int) Mandatory. Define the maximum size of HTTP streaming responses
    # (and the upper limit for polling responses)
    default: 4000000
    # -- Optional. List of special cases for defining the HTTP content-length
    # to be used for stream/poll response (through `specialCases[].value`)
    # when the user-agent supplied with the request contains all the specified
    # string (through the`specialCases[].userAgentContains`).
    # Special cases are evaluated in sequence, until one is enabled.
    specialCases:
      # - value: 100000
      #   userAgentContains:
      #     - "Symbian OS"
  # -- (int) Optional. Maximum lifetime allowed for single HTTP streaming
  # responses; when this timeout expires, the connection is closed, though the
  # session remains active and the Client can continue listening to the
  # UpdateEvents by binding the session to another connection.
  # Setting this timeout is not needed in normal cases; it is provided just in
  # case any user agent or intermediary node turned out to be causing issues on
  # very long-lasting HTTP responses.
  # The Setting is not applied to polling responses and to streaming responses
  # over WebSockets.
  # If not specified,
  # @default -- no limit is set; the streaming session duration will be limited
  # only by the `pushSession.contentLength` setting and, at least, by the
  # keep-alive message activity
  maxStreamingMillis:
  # -- (string) Optional. Enabling the use of the "chunked" transfer encoding,
  # as defined by the HTTP 1.1 specifications, for sending the response body on
  # HTTP streaming connections.
  # If set to `Y`, the "chunked" transfer encoding will be used anytime an
  # HTTP 1.1 response is allowed, which will enforce the use of HTTP 1.1 (see
  # `globalSocket.useHttpVersion`).
  # If set to `N`, causes no transfer encoding (that is, the "identity"
  # transfer encoding) to be used for all kinds of responses.
  # If set to `AUTO`, the "chunked" transfer encoding will be used only when an
  # HTTP 1.1 response is being sent (see `globalSocket.useHttpVersion`).
  # Though with "chunked" transfer encoding the content-length header is not
  # needed on the HTTP response header, configuring a content length for the
  # Server is still mandatory and the setting is obeyed in order to put a limit
  # to the response length.
  # @default -- true
  useChunkedEncoding:
  # -- (string) Optional. Enabling the use of the "gzip" content encoding, as
  # defined by the HTTP 1.1 specifications, for sending the resource contents
  # on HTTP responses; compression is currently not supported for responses
  # over WebSockets.
  # If set to `Y`, Gzip compression will be used anytime an HTTP 1.1 response
  # is allowed (for streaming responses, the "chunked" transfer encoding should
  # also be allowed), provided that the client has declared to accept it
  # through the proper http request headers.
  # If set to `N`, causes no specific content encoding to be applied for all
  # kinds of contents.
  # If set to `AUTO`, Gzip compression will not be used, unless using it is
  # recommended in order to handle special cases (and provided that all the
  # conditions for compression are met; see case Y above).
  # Streaming responses are compressed incrementally.
  # The use of compression may relieve the network level at the expense of the
  # Server performance. Note that bandwidth control and output statistics are
  # still based on the non-compressed content.
  # @default -- AUTO
  useCompression:
  # -- (int) Optional. Size in bytes of the response body below which compression
  # is not applied, regardless of the "use_compression" setting, as we guess
  # that no benefit would come. It is not applied to streaming responses,
  # which are compressed incrementally.
  # @default -- 1024
  compressionThreshold:
  # -- Optional. Configuration of the content-type to be specified in the
  # response headers when answering to session requests issued by native client
  # libraries and custom clients.
  # If set to `true`, the server will specify the text/enriched content-type.
  # This setting might be preferable when communicating over certain service
  # providers that may otherwise buffer streaming connections.
  # if set to `false`, the server will specify the text/plain content-type.
  # @default -- true
  enableEnrichedContentType:
  # -- (int) Optional. Maximum size for any ItemEventBuffer.
  # It applies to RAW and COMMAND mode and to any other case of unfiltered
  # subscription.
  # For filtered subscriptions, it poses an upper limit on the maximum buffer
  # size that can be granted by the Metadata Adapter or requested through the
  # subscription parameters. Similarly, it poses an upper limit to the length
  # of the snapshot that can be sent in DISTINCT mode, regardless of the value
  # returned by getDistinctSnapshotLength.
  # See the General Concepts document for details on when these buffers are
  # used. An excessive use of these buffers may give rise to a significant
  # memory footprint; to prevent this, a lower size limit can be set.
  # Note that the buffer size setting refers to the number of update events
  # that can be kept in the buffer, hence the consequent memory usage also
  # depends on the size of the values carried by the enqueued updates.
  # As lost updates for unfiltered subscriptions are logged on the
  # `lightstreamerLogger.pump` logger at `INFO` level, if a low buffer size limit
  # is set, it is advisable also setting this logger at `WARN` level.
  # Aggregate statistics on lost updates are also provided by the JMX interface
  # (if available) and by the Internal Monitor.
  # @default -- unlimited size
  maxBufferSize: 1000`
  # -- (int) Mandatory. Longest time a disconnected session can be kept alive
  # while waiting for the Client to rebind such session to another connection,
  # in order to make up for client or network latencies.
  # Note that the wait is not performed when the session is being closed
  # because of an explicit disconnection by the client.
  # If the client has requested an inactivity check on a streaming connection,
  # the same timeout is also started when no control request or reverse
  # heartbeat) has been received for the agreed time (again, in order to make
  # up for client or network latencies). If it expires, the current streaming
  # connection will be ended and the client will be requested to rebind to the
  # session (which triggers the previous case).
  sessionTimeoutMillis: 10000
  # -- (int) Optional. Longest time a session can be kept alive, after the
  # interruption of a connection at network level, waiting for the Client to
  # attempt a recovery. Since a disconnection may affect the Client without
  # affecting the Server, this also instructs the Server to keep track of the
  # events already sent for this time duration, to support unexpected recovery
  # requests.
  # The client should try a recovery request immediately after detecting the
  # interruption; but, the request may come later when, for instance,
  # - there is a network outage of a few seconds and the client must retry,
  # - the client detects the interruption because of the stalled timeout.
  # Hence, the optimal value should be tuned according with client-side
  # timeouts to ensure the better coverage of cases.
  # Note that recovery is available only for some client versions; if any other
  # version were involved, the session would be closed immediately.
  # A 0 value also prevents any accumulation of memory.
  # @default -- 0
  sessionRecoveryMillis: 13000
  # -- (int) Optional. Maximum number of bytes of streaming data, already sent
  # or being sent to the Client, that should be kept, in order to allow the
  # Client to recover the session, in case a network issue should interrupt the
  # streaming connection and prevent the client from receiving the latest
  # packets.
  # Note that recovery is available only for some client versions; if any other
  # version were involved, no data would be kept.
  # A 0 value also prevents any accumulation of memory.
  # @default -- the value configured for `pushSession.sendbuf`
  maxRecoveryLength:
  # -- (int) Optional. Maximum size supported for keeping a polling response,
  # already sent or being sent to the Client, in order to allow the Client to
  # recover the session, in case a network issue should interrupt the polling
  # connection and prevent the client from receiving the latest response.
  # Note that recovery is available only for some client versions; if any other
  # version were involved, no data would be kept.
  # A 0 value also prevents any accumulation of memory. On the other hand, a
  # value of -1 relieves any limit.
  # @default -- -1
  maxRecoveryPollLength:
  # -- (int) Optional. Longest time the subscriptions currently in place on a
  # session can be kept active after the session has been closed, in order to
  # prevent unsubscriptions from the Data Adapter that would be immediately
  # followed by new subscriptions in case the client were just refreshing the
  # page.
  # As a consequence of this wait, some items might temporarily appear as being
  # subscribed to, even if no session were using them.
  # If a session is closed after being kept active because of the
  # `pushSession.sessionTimeoutMillis` or "pushSession.sessionRecoveryMillis`
  # setting, the accomplished wait is considered as valid also for the
  # subscription wait purpose.
  # @default - the time configured for `pushSession.sessionTimeoutMillis`.
  subscriptionTimeoutMillis: 5000
  # -- (int) Optional. Timeout used to ensure the proper ordering of
  # client-sent messages, within the specified message sequence, before sending
  # them to the Metadata Adapter through notifyUserMessage.
  # In case a client request is late or does not reach the Server, the next
  # request may be delayed until this timeout expires, while waiting for the
  # late request to be received; then, the next request is forwarded and the
  # missing one is discarded with no further recovery and the client
  # application is notified.
  # Message ordering does not concern the old synchronous interfaces for message
  # submission. Ordering and delaying also does not apply to the special
  # "UNORDERED_MESSAGES" sequence, although, in this case, discarding of late
  # messages is still possible, in order to ensure that the client eventually
  # gets a notification.
  # A high timeout (as the default one) reduces the discarded messages, by
  # allowing the client library to reissue requests that have got lost.
  # A low timeout reduces the delays of subsequent messages in case a request
  # has got lost and can be used if message dropping is acceptable.
  # @default -- 30000
  missingMessageTimeoutMillis:
  # -- Optional. Configuration of the policy adopted for the delivery of
  # updates to the clients.
  # If set to `true`, the Server is allowed to perform "delta delivery"; it
  # will send special notifications to notify the clients of values that are
  # unchanged with respect to the previous update for the same item; moreover,
  # if supported by the client SDK, it may send the difference between previous
  # and new value for updates which involve a small change.
  # If set to `false`, the Server always sends to the clients the actual values
  # in the updates; note that any missing field in an update from the Data
  # Adapter for an item in MERGE mode is just a shortcut for an unchanged
  # value, hence the old value will be resent anyway.
  # Adopting the "delta delivery" is in general more efficient than always
  # sending the values. On the other hand, checking for unchanged values and/or
  # evaluating the difference between values puts heavier memory and processing
  # requirements on the Server.
  # In case "delta delivery" is adopted, the burden of recalling the previous
  # values is left to the clients.
  # This holds for clients based on the "SDK for Generic Client Development".
  # This also holds for clients based on some old versions of the provided SDK
  # libraries, which just forward the special unchanged notifications through
  # the API interface. Old versions of the .NET, Java SE (but for the ls_proxy
  # interface layer), Native Flex and Java ME libraries share this behavior.
  # Forcing a redundant delivery would simplify the client code in all the
  # above cases.
  # @default -- true
  enableDeltaDelivery:
  # -- (list) Optional. List of algorithms to be tried by default to perform
  # the "delta delivery" of changed fields in terms of difference between
  # previous and new value. This list is applied only on fields of items for
  # which no specific information is provided by the Data Adapter.
  # For each value to be sent to some client, the algorithms are tried in the
  # order specified by this list, until one is found which is compatible with
  # both client capabilities and the involved values.
  # Available names are:
  # - jsonpatch: computes the difference in JSON Patch format, provided
  # that the values are valid JSON representations;
  # - diff_match_patch: computes the difference with Google's
  # "diff-match-patch" algorithm ( the result is then serialized to the custom
  # "TLCP-diff" format).
  # Note that trying "diff" algorithms on unsuitable data may waste resources.
  # For this reason, the default algorithm list is empty,which means that no
  # algorithm is ever tried by default. The best way to enforce algorithms is
  # to do that on a field-by-field basis through the Data Adapter interface.
  # @default -- []
  defaultDiffOrders: []
    # - jsonpatch
    # - diff_match_patch
  # -- (any) Optional. Minimum length among two update values (old and new)
  # which enables the use of the JSON Patch format to express the new value as
  # the difference with respect to the old one, when this is possible.
  # If any value is shorter, it will be assumed that the computation of the
  # difference in this way will yield no benefit.
  # The special value `none` is also available. In this case, when the
  # computation of the difference in JSON Patch format is possible, it will
  # always be used, regardless of efficiency reasons. This can be leveraged in
  # special application scenarios, when the clients require to directly
  # retrieve the updates in the form of JSON Patch differences.
  # @default -- 50
  jsonPatchMinLength:
  # -- Optional. Configuration of the update management for items subscribed to
  # in COMMAND mode with unfiltered dispatching.
  # If set to `true`, the order in which updates are received from the Data
  # Adapter is preserved when sending updates to the clients; in this case, any
  # frequency limits imposed by license limitations are applied to the whole
  # item and may result in a very slow update flow.
  # If set to `false`, provided that no updates are lost, the Server can send
  # enqueued updates in whichever order; it must only ensure that, for updates
  # pertaining to the same key, the order in which updates are received from
  # the Data Adapter is preserved; in this case, any frequency limits imposed
  # by license limitations are applied for each key independently.
  # No item-level choice is possible. However, setting this flag as `true`
  # allows for backward compatibility to versions before 4.0, if needed.
  # @default -- false
  preserveUnfilteredCommandOrdering:
  # -- (string) Optional. Policy to be adopted for the handling of
  # session-related data when a session is closed.
  # If set to `Y`, internal buffers used for composing and sending updates are
  # kept among session-related data throughout the life of each session; this
  # speeds up update management.
  # If set to `N`, internal buffers used for composing and sending updates are
  # allocated and deallocated on demand; this minimizes the requirements in
  # terms of permanent per-session memory and may be needed in order to handle
  # a very high number of concurrent sessions, provided that the per-session
  # update activity is low from memory when the session is closed.
  # If set to `AUTO`, the current setting of `pushSession.enableDeltaDelivery`
  # is used; in fact, setting `pushSession.enableDeltaDeliver` as `false` may
  # denote  the need for reducing permanent per-session memory.
  # @default -- AUTO
  reusePumpBuffers:
  # -- (int) Optional. Size to be set for the socket TCP send buffer in case of
  # streaming connections.
  # The ideal setting should be a compromise between throughput, data aging,
  # and memory usage. A large value may increase throughput, particularly in
  # sessions with a high update activity and a high roundtrip time; however, in
  # case of sudden network congestion, the queue of outbound updates would need
  # longer to be cleared and these updates would reach the client with
  # significant delays. On the other hand, with a small buffer, in case of
  # sudden network congestion, most of the ready updates would not be enqueued
  # in the TCP send buffer, but inside the Server, where there would be an
  # opportunity to conflate them with newer updates.
  # The main problem with a small buffer is when a single update is very big,
  # or a big snapshot has to be sent, and the roundtrip time is high; in this
  # case, the delivery could be slow. However, the Server tries to detect these
  # cases and temporarily enlarge the buffer.
  # Hence, the factory setting is very small and it is comparable with a
  # typical packet size. There shouldn't be any need for an even smaller value;
  # also note that the system may force a minimum size.
  # Higher values should make sense only if the expected throughput is high and
  # responsive updates are desired.
  # @default -- 1600
  sendbuf:
  # -- (int) Optional. Longest delay that the Server is allowed to apply to
  # outgoing updates to collect more updates in the same packet. This value
  # sets a trade-off between Server scalability and maximum data latency. It
  # also sets an upper bound to the maximum update frequency for items not
  # subscribed with unlimited or unfiltered frequency.
  # @default -- 0
  maxDelayMillis: 30
  # -- Mandatory. Default keep-alive configuration.
  defaultKeepaliveMillis:
    # -- (int) Mandatory. Longest write inactivity time allowed on the socket.
    # If no updates have been sent after this time, then a small keep-alive
    # message is sent.
    # Note that the Server also tries other types of checks of the availability
    # of current sockets, which don't involve writing data to the sockets.
    # This setting can be overridden by the Client.
    value: 5000
    # -- Optional. If set to `true`, causes keepalives immediately following a
    # data event to be sent after a random, shorter interval (possibly even
    # shorter than the "min_keepalive_millis" setting). This can be useful if
    # many sessions subscribe to the same items and updates for these items are
    # rare, to avoid that also the keepalives for these sessions occur at the
    # same times.
    # @default -- false
    randomize: false
  # -- (int) Mandatory. Lower bound to the keep-alive time requested by a
  # Client.
  # Must be lower than the `pushSession.defaultKeepaliveMillis` setting.
  minKeepaliveMillis: 1000
  # -- (int) Mandatory. Upper bound to the keep-alive time requested by a
  # Client.
  # Must be greater than the `pushSession.defaultKeepaliveMillis` setting.
  maxKeepaliveMillis: 30000
  # -- (int) Mandatory. Longest time a client is allowed to wait, after
  # receiving a poll answer, before issuing the next poll request. Note that,
  # on exit from a poll request, a session has to be kept active, while waiting
  # for the next poll request.
  # The session keeping time has to be requested by the Client within a poll
  # request, but the Server, within the response, can notify a shorter time, if
  # limited by this setting.
  # The session keeping time for polling may cumulate with the keeping time
  # upon disconnection, as set by `pushSession.sessionTimeoutMillis`
  maxPollingMillis: 15000
  # -- Mandatory. Max idle configuration.
  maxIdleMillis:
    # -- Mandatory. Longest inactivity time allowed on the socket while waiting
    # for updates to be sent to the client through the response to
    # asynchronous poll request.
    # If this time elapses, the request is answered with no data, but the
    # client can still rebind to the session with a new poll request.
    # A shorter inactivity time limit can be requested by the client.
    value: 30000
    # -- Optional. If set to `true`, causes polls immediately following a data
    # event to wait for a random, shorter inactivity time. This can be useful
    # if many sessions subscribe to the same items and updates for these items
    # are rare, to avoid that also the following polls for these sessions occur
    # at the same times.
    # @default -- false
    randomize: false
  # -- (int) Optional. Shortest time allowed between consecutive polls on a
  # session. If the client issues a new polling request and less than this time
  # has elapsed since the STARTING of the previous polling request, the polling
  # connection is kept waiting until this time has elapsed.
  # In fact, neither a `pushSession.minPollingMillis` nor a
  # `pushSession.maxPollingMillis` setting are provided, hence a client is
  # allowed to request 0 for both, so that the real polling frequency will only
  # be determined by roundtrip times.
  # However, in order to avoid that a similar case causes too much load on the
  # Server, this setting can be used as a protection, to limit the polling
  # frequency.
  # @default -- 0
  minInterPollMillis:

# -- Optional. Mobile Push Notification (MPN) module configuration.
# This module is able to receive updates from an item subscription on behalf of
# a user, and forward them to a mobile push notification service, such as
# Apple's APNs or Google's FCM.
# If not defined, the MPN module will not start in any case, and all requests
# related to mobile push notifications will be rejected.
# Mobile Push Notification support is an optional feature, available depending
# on Edition and License Type. To know what features are enabled by your
# license, please see the License tab of the Monitoring Dashboard (by default,
# available at /dashboard).
mpn:
  # -- Optional. MPN module master switch. If N, the MPN module will
  # not start in any case, and all requests related to mobile push
  # Note that, by enabling the module, the handling of the special
  #  URL configured by <apple_web_service_path> is also enabled.
  # @default -- false
  enabled:
  # -- (string) Optional. Specifies the root path of the web service URL to be
  # invoked by the client application on a Safari browser to enable Web Push
  # Notifications. Currently, the latter is achieved by invoking the
  # `window.safari.pushNotification.requestPermission` method.
  # Only when the MPN module is enabled, the specified path is reserved and the
  # Server identifies these special requests and processes them as required.
  # Enabling the internal web server (`webServer.enabled` set to `true`) is not
  # needed for this; note that if the internal web server is enabled, the
  # processing of this path is different from the processing of the other URLs.
  # @default -- /apple_web_service
  appleWebServicePath:
  # -- (string) Optional. Specifies the name of the built-in data adapter that
  # client SDKs may subscribe to to obtain the current status of MPN devices
  # and subscriptions. This data adapter is automatically added to all
  # configured Adapter Sets in an MPN-enabled Server.
  # @default -- MPN_INTERNAL_DATA_ADAPTER
  internalDataAdapter:
  # -- Mandatory. Hibernate configuration.
  # The MPN module uses an Hibernate-mapped database to make the list of
  # devices and subscriptions persistent and let different module instances
  # communicate.
  hibernateConfig:
    # -- Mandatory. The Hibernate JDBC properties.
    # The provided values are used to show an example of connections settings
    # for HSQL (suitable for testing).
    # The HSQL jar must be included in the lib/mp/hibernate folder of the Docker
    # image.
    connection:
      # -- Mandatory. JDBC driver class.
      jdbcDriverClass: org.hsqldb.jdbcDriver
      # -- Mandatory. JDBC URL.
      jdbcUrl: jdbc:hsqldb:hsql://localhost:9001
      # -- Mandatory. The name of the secret containing the credentials. The
      # secret must contain the keys `user` and `password`.
      # The `hsql-hibernate-secret` secret is provided out of the box and
      # contains the default "SA" user with empty password.
      credentialsSecretRef: hsql-factory-secret
      # -- Optional. Full class name of the dialect to use.
      "dialect": "org.hibernate.dialect.HSQLDialect"
    # Sample database connection settings for MySQL
    # connection:
    #   jdbcDriverClass: com.mysql.jdbc.Driver
    #   jdbcUrl: jdbc:mysql://192.168.1.100:3306
    #   "dialect": "org.hibernate.dialect.MySQL5Dialect"
    # Sample database connection settings for Oracle
    # connection:
    #   jdbcDriverClass: oracle.jdbc.driver.OracleDriver
    #   jdbcUrl: "jdbc:oracle:thin:@(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.100)(PORT = 1521))) (CONNECT_DATA = (SERVICE_NAME = ORCL) (SRVR = DEDICATED)))"
    #   "dialect": "org.hibernate.dialect.Oracle10gDialect"

    # -- Optional. The Hibernate optional configuration properties.
    # See https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/session-configuration.html#configuration-optional
    optionalConfiguration:
      # -- HikariCP database connection pool configuration
      "hikari.connectionTimeout": "5000"
      # -- Enable Hibernate's automatic session context management
      "current_session_context_class": "thread"
      # -- Disable the second-level cache
      "cache.provider_class": "org.hibernate.cache.internal.NoCacheProvider"
      # -- Automatically create/update the database schema on startup.
      "hbm2ddl.auto": "update"
      # -- Debugging: echo all executed SQL to console
      "show_sql": "false"
  # -- (int) Optional. Timeout for MPN request processing. As each MPN request
  # interacts with the database, a timeout is applied so that a disconnected
  # database will not result in a hang client. If a timeout occurs during a
  # request processing, the client receives a specific error.
  # @default -- 15000
  requestTimeoutMillis:
  # - (int) Optional. Interval between health checks on the database.
  # During this health check, a number of tasks are carried out: takeover of
  # dead module instances, stop and restart of subscriptions updated by other
  # module instances, and deletion of abandoned subscriptions.
  # @default -- 5000
  moduleCheckPeriodMillis:
  # -- (int) Optional. Timeout for a health check of other modules. If a
  # module fails to do its health check for this period of time, other module
  # instances may consider it dead and takeover its devices and subscriptions.
  # Hence, it must be longer than `moduleCheckPeriodMillis` and it should be
  # long enough to avoid false positives.
  # In case a cluster is in place, the timeout should be longer than all values
  # of `moduleCheckPeriodMillis` configured for the various instances in the
  # cluster.
  # @default -- 30000
  moduleTimeoutMillis:
  # -- Optional. Enabling of the startup of the module upon Server startup.
  # If module startup is prevented, or not yet completed, or completed
  # unsuccessfully, the module is inactive. This means that no subscription
  # processing is performed and any client MPN requests are refused.
  # @default -- all settings at their defaults
  activationOnStartUp:
    # -- Optional. If set to `true`, a module startup will be initiated
    # immediately at Server startup through the mechanism set by
    # `maxDelay`.
    # If set to `false`, the Server will start with an inactive module.
    # Note: the initialization of a new module (as well as the deactivation of
    # the current module), can be requested at any time through the JMX
    # interface (full JMX features is an optional feature, available depending
    # on Edition and License Type).
    # @default -- true
    enabled:
    # -- (int) Optional, but effective only if `mpn.enableActivationOnStartUp`
    # is set to `true`. If not specified, or set to `-1`, the Server startup
    # will be blocked until module startup completion; if the module startup
    # fails, the Server startup will fail in turn.
    # Otherwise, the Server startup will be blocked only up to the specified
    # delay. If the delay expires, the Server may start with the module
    # temporarily inactive; moreover, if the module startup eventually fails,
    # the Server will keep running with an inactive module.
    # @default -- the Server startup will be blocked until module startup
    # completion
    maxDelayMillis:
  # -- Optional. Enabling of the automatic initialization of a new module upon
  # upon health check failure.
  # If set to `true`, upon health check failure, the failed module will become
  # inactive and the initialization of a new module will be started; if
  # unsuccessful, the Server will keep running with an inactive module.
  # If set to `false`, upon health check failure, the failed module will become
  # inactive and the Server will keep running with an inactive module.
  # See `mpn.activationOnStartUp` for notes on inactive modules.
  # @default -- true
  enableModuleRecovery:
  # -- (int) Optional. Timeout after which an inactive device is considered
  # abandoned and is permanently deleted. A device is considered inactive if it
  # is suspended (i.e. its device token has been rejected by the MPN service)
  # or it has no active subscriptions. A suspended device may be resumed with a
  # token change (typically, client libraries handle this situation
  # automatically).
  # @default -- 10080 (7 days)
  deviceInactivityTimeoutMinutes:
  # -- (int) Optional. Periodicity of the device garbage collector. Once every
  # this number of minutes, devices that have been inactive for more than
  # `deviceInactivityTimeoutMinutes` are permanently deleted.
  # @default -- 60 (1 hour)
  collectorPeriodMinutes:
  # -- Optional. Sizes of request processor's ("MPN EXECUTOR") thread pool.
  # The request processor is devoted to process incoming MPN requests, such as
  # subscription activations and deactivations. These requests access the
  # database and may be subject to blocking in case of database disconnection.
  # @default -- all settings at their defaults
  executorPool:
    # -- (int) Optional. Specifies the maximum number of threads the pool may
    # use.
    # @default -- 10
    maxSize:
    # -- (int) Optional. Specifies the the maximum number of idle threads the
    # pool may have.
    # @default -- 0, meaning the pool will not consume resources when idle
    maxFree:
  # -- Optional. Requests the creation of a specific thread pool,
  # `MPN DEVICE HANDLER`, specifically dedicated to the handling of the
  # internal sessions that are used to receive subscription updates to be sent
  # to the devices. In particular, during the startup phase, all the
  # subscriptions needed to handle all the active push notifications are
  # performed in a burst. If defined, the pool should be sized wide enough to
  # support this burst of activity. If the pool is not defined, each
  # "subscribe" call will be managed by the thread pool associated with the
  # involved Data Adapter, similarly to ordinary sessions.
  deviceHandlerPool:
    # -- (int) Optional. Specifies the maximum number of threads the pool may
    # use.
    # @default -- 100
    maxSize:
    # -- (int) Optional. Specifies the the maximum number of idle threads the
    # pool may have.
    # @default -- 0, meaning the pool will not consume resources when idle
    maxFree:
  # -- (int) Optional. Size of the notifiers' `MPN XXX NOTIFIER` internal
  # thread pool, which is devoted to composing the notifications payload,
  # sending them to the notification service and processing the response. This
  # task does not include blocking operations; however, on multiprocessor
  # machines, allocating multiple threads for this task may be beneficial.
  # @default -- the number of available total cores, as detected by the JVM
  notifierPoolSize:
  # -- (int) Optional. Size of the `MPN PUMP` internal thread pool, which is
  # devoted to integrating the update events pertaining to each MPN device and
  # to creating the update commands that become push notifications, whenever
  # needed. This task does not include blocking operations; however, on
  # multiprocessor machines, allocating multiple threads for this task may be
  # beneficial.
  # @default -- the number of available total cores, as detected by the JVM
  mpnPumpPoolSize:
  # -- (int) Optional. Number of threads used to parallelize the implementation
  # of the internal MPN timers.
  # This task does not include blocking operations, but its computation may be
  # heavy under high update activity; hence, on multiprocessor machines,
  # allocating multiple threads for this task may be beneficial.
  # @default -- 1
  mpnTimerPoolSize:
  # -- (string) Mandatory. Specifies what to do in case of database failure.
  # A number of internal operations are bound to the success of a database
  # update. In those (hopefully) rare situations when the database is not
  # available, the MPN module must know what to do: if it is better to abort
  # the operation entirely (thus risking to lose the event) or better to
  # continue anyway (thus risking to duplicate the event). A typical situation
  # is the triggering of a subscription, e.g.: when the price of a stock raises
  # above a threshold, the MPN module must both send the mobile push
  # notification and mark the subscription as triggered on the database. If the
  # database is not available, the MPN module may react by aborting the
  # operation, i.e. no mobile push notification is sent, another one will be
  # sent only when (and if) the price drops and then raises above the threshold
  # again. Alternatively, it may react by continuing with the operation, i.e.
  # the mobile push notification is sent anyway, but (since the database has not
  # been updated) if the price drops and then raises again it may get sent
  # twice.
  # Set to `abort_operation` to abort the ongoing operation.
  # Set to `continue_operation` to continue the ongoing operation.
  # @default -- abort_operation
  reactionOnDatabaseFailure: continue_operation
  # -- Optional. Apple platforms notifier configuration.
  appleNotifierConfig:
    # -- (int) Optional. Minimum delay between successive mobile push
    # notifications for the same app/device pair. Each app/device pair is
    # subject to constraints on the pace mobile push notifications may be sent
    # to it. For this reason, a minimum delay is set and may be altered with
    # this parameter.
    # Lowering it too much, and subsequently sending notifications with a high
    # frequency, may cause Apple's Push Notification Service ("APNs") to close
    # the connection and ban (temporarily or permanently) any successive
    # notification.
    # Mobile push notifications fired by a trigger are not subject to this limit
    # and may be sent at higher pace.
    # @default -- 1000 (1 sec)
    minSendDelayMillis:
    # -- (int) Optional. Maximum number of concurrent connections to APNS
    # services. The connection pool starts with 1 connection and grows
    # automatically as the load increases. In case the expected load is very
    # high, increasing the pool maximum size my be beneficial.
    # For apps with development service level, this parameter is ignored.
    # @default -- 1
    maxConcurrentConnections:
    # -- (int) Optional. Timeout for connecting to APNS services. In case of
    # slow outgoing connectivity, increasing the timeout may be beneficial.
    # @default -- 30000 (30 sec)
    connectionTimeout:
    # -- Optional. List of apps that should receive mobile push notifications.
    apps:
      # -- An application configuration.
      myApp:
        # -- Optional. Enablement of the application configuration.
        # @default -- false
        enabled:
        # -- (string) Mandatory if `enabled` is set to `true`. The app ID,
        # which corresponds to the bundle ID of the app's binary. Note that for
        # web apps (i.e. targeting Safari push notification) the ID must begin
        # with `web`", e.g.: `web.com.mydomain.myapp`.
        id:
        # -- Mandatory if `enabled` is set to `true`. Specifies the intended
        # service level for the current app ID, must be one of: `test`,
        # `development`, `production`. If set to `test`, notification will be
        # logged only and no connection will be established with Apple's
        # servers. The corresponding logger is `lightstreamerLogger.mpn.apple`,
        # notifications are logged at `INFO` level
        # (see logging.loggers.lightstreamerLogger.subLoggers.lightstreamerLogger.mpn.apple).
        # If set to `development` or `production`, notifications will be sent
        # to, respectively, Apple's development or production servers.
        # Note that for web apps (i.e. targeting Safari push notification) the
        # `development` service level should not be used, as there is no
        # corresponding `development` client environment that can receive
        # notifications. Use either `production` or `test`.
        serviceLevel:
        # -- Mandatory if `serviceLevel` is set to `development` or
        # `production`.
        # The reference to the keystore (defined in
        # `mpn.appleNotifierConfig.keyStores`) where Apple's certificate for
        # the app ID is stored.
        keystoreRef:
        # -- Optional. The configmap name and the key where the push package
        # zip file is stored. This file contains a descriptor of the web app
        # (i.e. targeting Safari push notification), and is mandatory only for
        # web apps (ignore in other cases). See the General Concepts document
        # for more information on how to produce this file. -->
        pushPackageFileRef:
          # name: push-package-map
          # key: push_package.zip
        # -- Optional. List of trigger expressions that will be accepted. Each
        # each item is a Java-compatible regular expression
        # (see java.util.regex.Pattern): triggers requested via client APIs
        # will be compared with each regular expression, and accepted only if
        # there is at least one match.
        # Remember that the MPN Module supports, as trigger, any Java boolean
        # expression, including use of JDK classes and methods, with the addition
        # of field references syntax (see the iOS Client SDK for more information).
        # Hence, this check is a safety measure required to avoid that clients
        # can request triggers potentially dangerous for the Server, as each
        # trigger may contain arbitrary Java code.
        # If left commented out or empty, no triggers will be accepted.
        # Please note that using an "accept all" regular expression like `.*`
        # is possible, but still leaves the Server exposed to the danger of
        # maliciously crafted triggers. Anyway, the Metadata Adapter has a second
        # chance to check for trigger allowance.
        # The example shown below is for a typical notification on threshold,
        # where a field is compared against a numeric constant.
        # Note: submitted trigger expressions are compared with this list of
        # regular expressions after their named-arguments have been converted
        # to indexed-arguments. Always specify fields with the `$[digits]` format,
        # not the `${name}` format.
        # @default -- []
        triggerExpressions: []
          # - Double\.parseDouble\(\$\[\d+\]\) [<>] [+-]?(\d*\.)?\d+
    # -- Optional. Keystores definition.
    keyStores:
      # -- Keystore configuration for the app.
      myAppKeystore:
        # -- Mandatory. The secret name and the key where the keystore file is
        # stored.
        keystoreFileSecretRef:
          # name:
          # key:
        # -- Mandatory. The secret name and the key where the keystore password
        # is stored.
        keystorePasswordSecretRef:
          # name:
          # key:
  # -- Optional. Google platforms notifier configuration.
  googleNotifierConfig:
    # -- (int) Optional. Minimum delay between successive mobile push
    # notifications for the same app/device pair. Each app/device pair is
    # subject to constraints on the pace mobile push notifications may be sent
    # to it. For this reason, a minimum delay is set and may be altered with
    # this parameter. Lowering it too much, and subsequently sending
    # notifications with a high frequency, may cause Google's Firebase Cloud
    # Messaging service ("FCM") to close the connection and ban (temporarily or
    # permanently) any successive notification.
    # Mobile push notifications fired by a trigger are not subject to this limit
    # and may be sent at higher pace.
    # @default -- 1000 (1 sec)
    minSendDelayMillis:
    # -- (int) Optional. Size of the notifier's `MPN XXX MESSAGING` internal
    # thread pool, which is devoted to sending the notifications payload. Each
    # app has a separate thread pool. On multiprocessor machines, allocating
    # multiple threads for this task may be beneficial.
    # @default -- the number of available total cores, as detected by the JVM
    messagingPoolSize:
    # -- Optional. List of apps that should receive mobile push notifications.
    apps:
      # -- An application configuration.
      myApp:
        # -- Optional. Enablement of the application configuration.
        # @default -- false
        enabled:
        # -- (string) Mandatory if `enabled` is set to `true`. The package name
        # of the app.
        packageName:
        # -- (string) Mandatory if `enabled` is set to `true`. Specifies the
        # intended service level for the current app, must be one of: `test`,
        # `dry_run`,`production`.
        # If set to `test`, notification will be logged only and no connection
        # will be established with Google's servers.
        # The corresponding logger is `lightstreamerLogger.mpn.google`,
        # notifications are logged at `INFO` level (see
        # `logging.loggers.lightstreamerLogger.subLoggers.lightstreamerLogger.mpn.google`).
        # If set to `dry_run` or `production`, notifications will be sent to
        # Google's servers. If set to `dry_run`, notifications will be accepted
        # by Google's servers but not delivered to the user's device.
        serviceLevel:
        # -- Mandatory if `serviceLevel` is set to `dry_run` or `production`.
        # The configmap name and the key where the JSON descriptor for the
        # service account credentials of this project on Firebase console is
        # stored. See the General Concepts document for more information on how
        # to obtain this file.
        serviceJsonFileRef:
          # name: service-account-secret
          # key: service-account.json
        # -- Optional. List of trigger expressions that will be accepted. Each
        # each item is a Java-compatible regular expression
        # (see java.util.regex.Pattern): triggers requested via client APIs
        # will be compared with each regular expression, and accepted only if
        # there is at least one match.
        # Remember that the MPN Module supports, as trigger, any Java boolean
        # expression, including use of JDK classes and methods, with the addition
        # of field references syntax (see the iOS Client SDK for more information).
        # Hence, this check is a safety measure required to avoid that clients
        # can request triggers potentially dangerous for the Server, as each
        # trigger may contain arbitrary Java code.
        # If left commented out or empty, no triggers will be accepted.
        # Please note that using an "accept all" regular expression like `.*`
        # is possible, but still leaves the Server exposed to the danger of
        # maliciously crafted triggers. Anyway, the Metadata Adapter has a second
        # chance to check for trigger allowance.
        # The example shown below is for a typical notification on threshold,
        # where a field is compared against a numeric constant.
        # Note: submitted trigger expressions are compared with this list of
        # regular expressions after their named-arguments have been converted
        # to indexed-arguments. Always specify fields with the `$[digits]` format,
        # not the `${name}` format.
        # @default -- []
        triggerExpressions: []
          # - Double\.parseDouble\(\$\[\d+\]\) [<>] [+-]?(\d*\.)?\d+

# -- Optional. Internal web server configuration.
# Note that some of the included settings may also apply to the Monitoring
# Dashboard pages, which are supplied through the internal web server. In
# particular, this holds for the `webServer.compressionThreshold` settings.
# Anyway, this does not hold for the `webServer.enabled` setting, as the
# Monitoring Dashboard accessibility is only configured through
# `management.dashboard`.
webServer:
  # -- Optional. Enabling of the internal web server.
  # If set to `true`, the Server accepts requests for file resources.
  # If set  to `false`, the Server ignores requests for file resources.
  # @default -- false
  enabled: true
  # -- Optional. The configmap name and the key where an HTML page to be returned
  # upon unexpected request URLs is stored. This applies to URLs in reserved
  # ranges that have no meaning.
  # If the Internal web server is not enabled (`webServer.enabled` set to
  # `false`), this also applies to all non-reserved URLs; otherwise,
  # nonexisting non-reserved URLs will get the HTTP 404 error as usual.
  # The file content should be encoded with the iso-8859-1 charset.
  # The file path is relative to the conf directory.
  # @default -- the proper page is provided by the Server
  errorPageRef:
    # name: resources
    # key: ErrorPage.html

  # -- Optional. Path of the file system directory to be used by the internal
  # web server as the root for URL path mapping.
  # The path is relative to the conf directory. Note that the /lightstreamer
  # URL path (as any alternative paths defined through
  # `pushSession.serviceUrlPrefix`) is reserved, as well as the base URL path
  # of the Monitoring Dashboard(see `management.dashboard.urlPath`); hence,
  # subdirectories of the pages directory with conflicting names would be
  # ignored.
  # @default -- ../pages
  pagesDir:
  # -- (int) Optional. Caching time, in minutes, to be allowed to the browser
  # (through the "expires" HTTP header) for all the resources supplied by the
  # internal web server.
  # A zero value disables caching by the browser.
  # @default -- 0
  persistencyMinutes:
  # -- Optional. Path of the MIME types configuration property file.
  # The file path is relative to the conf directory.
  # @default --  `./mime_types.properties`
  mimeTypesConfig:
  # -- Optional. Path of an HTML page to be returned as the body upon a
  # "404 Not Found" answer caused by the request of a nonexistent URL.
  # The file content should be encoded with the iso-8859-1 charset.
  # The file path is relative to the conf directory.
  # @default -- the proper page is provided by the Server
  notFoundPage:
  # -- (int) Optional. Size of the resource contents below which compression is
  # not applied, regardless of the `webServer.compression.default` setting, as
  # we guess that no overall benefit would be reached.
  # @default -- 8192
  compressionThreshold:
  # -- Optional. Enables the processing of the "/crossdomain.xml" URL, required
  # by the Flash player in order to allow pages from a different host to
  # request data to Lightstreamer Server host.
  # See the "WebSite Controls" section on
  # http://www.adobe.com/devnet/flashplayer/articles/flash_player_9_security.pdf
  # for details on the contents of the document to be returned.
  # If set to `true`, the Server accepts requests for "/crossdomain.xml"; the
  # file configured through the `webServer.flexCrossdomainPath` setting is
  # returned. Enabling internal web server (through `webServer.enabled`) is
  # not needed; note that if the internal web server is enabled, the processing
  # of the "/crossdomain.xml" URL is different than the processing of the other
  # URLs.
  # If set to `false`, no special processing for the "/crossdomain.xml" requests
  # is performed.
  # Note that if the internal web server is enabled, then the processing of the
  # "/crossdomain.xml" URL is performed as for any other URL (i.e. a file named
  # "crossdomain.xml" is looked for in the directory configured as the root for
  # URL path mapping).
  # Note that "/crossdomain.xml" is also used by the Silverlight runtime when
  # "/clientaccesspolicy.xml" is not provided.
  # @default -- false
  enableFlexCrossdomain:
  # -- Mandatory when `webServer.enableFlexCrossdomain` is true.
  # Path of the file to be returned upon requests for the "/crossdomain.xml"
  # URL. It is ignored when `webServer.enableFlexCrossdomain` is false.
  # The file content should be encoded with the iso-8859-1 charset.
  # The file path is relative to the conf directory.
  flexCrossdomainPath:
  # -- Optional. Enables the processing of the "/clientaccesspolicy.xml" URL,
  # required by the Silverlight runtime in order to allow pages from a
  # different host to request data to Lightstreamer Server host.
  # See http://msdn.microsoft.com/en-us/library/cc838250(VS.95).aspx#crossdomain_communication
  # for details on the contents of the document to be returned.
  # If set to `true`, the Server accepts requests for
  # "/clientaccesspolicy.xml"; the file configured through the
  # `webServer.silverlightAccessPolicyPath` setting is returned.
  # Enabling internal web server (through `webServer.enabled`) is not needed;
  # note that if the internal web server is enabled, the processing of the
  #  "/clientaccesspolicy.xml" URLis different than the processing of the other
  # URLs.
  # If set to `false`, no special processing for the "/clientaccesspolicy.xml"
  # requests is performed.
  # Note that if the internal web server is enabled, then the processing of the
  #  "/clientaccesspolicy.xml" URL is performed as for any other URL (i.e. a
  # file named "clientaccesspolicy.xml" is looked for in the directory
  # configured as the root for URL path mapping).
  # Note that "/crossdomain.xml" is also used by the Silverlight
  # runtime when "/clientaccesspolicy.xml" is not provided.
  # @default -- false
  enableSilverlightAccessPolicy:
  # -- Mandatory when `web.enableSilverlightAccessPolicy` is `true`.
  # Path of the file to be returned upon requests for the
  # "/clientaccesspolicy.xml" URL. It is ignored when
  # `web.enableSilverlightAccessPolicy` is false.
  # The file content should be encoded with the iso-8859-1 charset.
  # The file path is relative to the conf directory.
  silverlightAccessPolicyPath:

# -- Optional. Clustering configuration.
cluster:
  #  -- Optional. Host address to be used for control/poll/rebind connections.
  #  A numeric IP address can be specified as well. The use of non standard,
  #  unicode names may not be supported yet by some Client SDKs.
  #  This setting can be used in case a cluster of Server instances is in
  #  place, to ensure that all client requests pertaining to the same session
  #  are issued against the same Server instance. If the Load Balancer can
  #  ensure that all requests coming from the same client are always routed to
  #  the same Server instance, then this setting is not needed.
  #  See the Clustering.pdf document for details.
  #  Note: When this setting is used, clients based on any Unified Client SDK
  #  that supports the optional setEarlyWSOpenEnabled method in the
  #  ConnectionOptions class should invoke this method with false, to improve
  #  startup performances.
  #  In case a request comes from a web client and
  #  `cluster.controlLinkMachineName` is also specified, the latter setting may
  #  be applied instead; see the comment for `cluster.controlLinkMachineName`
  #  for details.
  #  Support for clustering is an optional feature, available depending on
  #  Edition and License Type. When not available, this setting is ignored.
  controlLinkAddress:
  #  -- Optional. Host name to be used, in addition to the domain name
  #  specified on the front-end pages, for control/poll/rebind connections
  #  coming from web clients. This only regards clients based on old versions
  #  of the Web (Unified API) Client SDK (earlier than 8.0.0). The use of non
  #  standard, unicode names may not be supported by old versions of the Web
  #  Client SDK.
  #  This setting will override the `cluster.controlLinkAddress` setting when
  #  the request comes from such Web Client SDKs and the access to Server data
  #  pages requires that the latter share a common subdomain with application
  #  pages.
  #  This was one of the ways used by these SDKs to request streaming data; see
  #  the Client Guide in the Web (Unified API) Client SDK for these versions
  #  for details on the cases in which this setting will be preferred; note
  #  that, in this regard, the behavior will be slightly different when the
  #  older HTML Client Library is in use, so as to ensure backward
  #  compatibility.
  #  This option is useful if the subdomain-name part of the hostname is
  #  subject to changes or if the same machine needs to be addressed through
  #  multiple subdomain names (e.g. for multihosting purpose).
  #  The configured name should contain all the portions of the address except
  #  for the subdomain name. For example, assuming the "mycompany.com"
  #  subdomain is declared in the front-end pages:
  #  - If the full address is "push1.mycompany.com", the name should be
  #  "push1";
  #  - If the full address is "push.int2.cnt3.mycompany.com", the name
  #    should be "push.int2.cnt3".
  #  Refer to `cluster.controlLinkAddress` for other remarks.
  #  Support for clustering is an optional feature, available depending on
  #  Edition and License Type. When not available, this setting is ignored.
  controlLinkMachineName:
  # -- (int) Optional. If set and positive, specifies a maximum duration to be
  # enforced on each session. If the limit expires, the session is closed and
  # the client can only establish a new session. This is useful when a cluster
  # of Server instances is in place, as it leaves the Load Balancer the
  # opportunity to migrate the new session to a different instance.
  # See the Clustering document for details on this mechanism and on how
  # rebalancing can be pursued.
  # @default -- unlimited
  maxSessionDurationMinutes:

# -- Optional. Load configuration.
load:
  # -- (int) Optional. Maximum number of concurrent client sessions allowed.
  # Requests for new sessions received when this limit is currently exceeded
  # will be refused; on the other hand, operation on sessions already
  # established is not limited in any way.
  # Note that closing and reopening a session on a client when this limit is
  # currently met may cause the new session request to be refused.
  # The limit can be set as a simple, heuristic protection from Server
  # overload.
  # @default -- unlimited number of concurrent client sessions
  maxSessions:
  # -- (int) Optional. Maximum number of concurrent MPN devices sessions
  # allowed.
  # Once this number of devices has been reached, requests to active mobile
  # push notifications will be refused.
  # The limit can be set as a simple, heuristic protection from Server overload
  # from MPN subscriptions.
  # @default -- unlimited number of concurrent MPN devices sessions
  maxMpnDevices:
  # -- (int) Optional. Limit to the overall size, in bytes, of the buffers
  # devoted to I/O operations that can be kept allocated for reuse.
  # If 0, removes any limit to the allocation (which should remain limited,
  # based on the maximum concurrent buffer needs).
  # If -1, disables buffer reuse at all and causes all allocated buffers to be
  # released immediately.
  # @default -- 200000000
  maxCommonNioBufferAllocation:
  # -- (int) Optional. Number of distinct NIO selectors (each one with its own
  # thread) that will share the same operation. Different pools will be
  # prepared for different I/O operations and server sockets, which may give
  # rise to a significant overall number of selectors.
  # Further selectors may be created because of the `load.selectorMaxLoad`
  # setting.
  # @default -- the number of available total cores, as detected by the JVM
  maxCommonPumpBufferAllocation:
  # -- (int) Optional. Number of distinct NIO selectors (each one with its own
  # thread) that will share the same operation. Different pools will be
  # prepared for different I/O operations and server sockets, which may give
  # rise to a significant overall number of selectors.
  # Further selectors may be created because of the `load.selectorMaxLoad`
  # setting.
  # @default -- the number of available total cores, as detected by the JVM
  selectorPoolSize:
  # -- (int) Optional. Maximum number of keys allowed for a single NIO selector.
  # If more keys have to be processed, new temporary selectors will be created.
  # If the value is 0, then no limitations are applied and extra selectors will
  # never be created.
  # The base number of selectors is determined by the `load.selectorPoolSize`
  # setting.
  # @default -- 0
  selectorMaxLoad:
  # -- (int) Optional. Number of threads used to parallelize the implementation
  # of the internal timers.
  # This task does not include blocking operations, but its computation may be
  # heavy under high update activity; hence, on multiprocessor machines,
  # allocating multiple threads for this task may be beneficial.
  # @default -- 1
  timerPoolSize:
  # -- (int) Optional. Size of the "EVENTS" internal thread pool, which is
  # devoted to dispatching the update events received from a Data Adapter to
  # the proper client sessions, according with each session subscriptions.
  # This task does not include blocking operations; however, on multiprocessor
  # machines, allocating multiple threads for this task may be beneficial.
  # @default -- the number of available total cores, as detected by the JVM
  eventsPoolSize:
  # -- (int) Optional. Size of the "SNAPSHOT" internal thread pool, which is
  # devoted to dispatching the snapshot events upon new subscriptions from
  # client sessions.
  # This task does not include blocking operations; however, on multiprocessor
  # machines, allocating multiple threads for this task may be beneficial.
  # @default -- the number of available total cores, as detected by the JVM, or
  # `10`, if the number of cores is less
  snapshotPoolSize:
  # -- (int) Optional. Size of the "PUMP" internal thread pool, which is
  # devoted to integrating the update events pertaining to each session and to
  # creating the update commands for the client, whenever needed.
  # This task does not include blocking operations; however, on multiprocessor
  # machines, allocating multiple threads for this task may be beneficial.
  # @default -- the number of available total cores, as detected by the JVM
  pumpPoolSize:
  # -- (int) Optional. Maximum number of tasks allowed to be queued to enter
  # the "PUMP" thread pool before undertaking backpressure actions.
  # In particular, the same restrictive actions associated to the
  # `load.serverPoolMaxQueue` check will be performed (regardless that
  # `load.serverPoolMaxQueue` itself is set).
  # A steadily long queue on the PUMP pool may be the consequence of a CPU
  # shortage due to a huge streaming activity.
  # A negative value disables the check.
  # @default -- -1
  pumpPoolMaxQueue:
  # -- (int) Optional. Maximum number of threads allowed for the "SERVER"
  # internal pool, which is devoted to the management of the client requests.
  # This kind of tasks includes operations that are potentially blocking:
  # - getHostName;
  # - socket close;
  # - calls to a Metadata Adapter that may need to access to some external
  #   resource (i.e. mainly notifyUser, getItems, getSchema; other methods
  #   should be implemented as nonblocking, by leaning on data cached by
  #   notifyUser);
  # - calls to a Data Adapter that may need to access to some external resource
  #   (i.e. subscribe and unsubscribe, though it should always be possible to
  #   implement such calls asynchronously);
  # - file access by the internal web server, though it should be used  only in
  #   demo and test scenarios.
  # Note that specific thread pools can optionally be defined in order to
  # handle some of the tasks that, by default, are handled by the SERVER thread
  # pool. They are defined in "adapters.xml"; see the templates provided in the
  # In-Process Adapter SDK for details.
  # A zero value means a potentially unlimited number of threads.
  # @default -- 1000
  serverPoolMaxSize:
  # -- (int) Optional, but mandatory if `load.serverPoolMaxSize`is set to `0`.
  # Maximum number of idle threads allowed for the "SERVER" internal pool,
  # which is devoted to the management of the client requests.
  # Put in a different way, it is the minimum number of threads that can be
  # present in the pool. To accomplish this setting, at pool initialization,
  # suitable idle threads are created; then, each time a thread becomes idle,
  # it is discarded only if enough threads are already in the pool.
  # It must not be greater than `load.serverPoolMaxSize` (unless the latter is
  # set to `0`, i.e. `unlimited`); however, it may be lower, in case
  # `load.serverPoolMaxSize` is kept high in order to face request bursts; a
  # zero value means no idle threads allowed in the pool, though this is not
  # recommended for performance reasons.
  # @default -- 10, if `load.serverPoolMaxSize` is not defined; otherwise, the
  # same as `load.serverPoolMaxSize`, unless the latter is set to `0`, i.e.
  # `unlimited`, in which case this setting is mandatory
  serverPoolMaxFree:
  # -- (int) Optional. Maximum number of tasks allowed to be queued to enter
  # the "SERVER" thread pool before undertaking backpressure actions.
  # In particular, as long as the number is exceeded, the creation of new
  # sessions will be refused and made to fail; additionally, the same r
  # restrictive action on the accept loops associated to the
  # `load.acceptPoolMaxQueue` check will be performed (regardless that
  # `load.acceptPoolMaxQueue` itself is set).
  # On the other hand, if the MPN DEVICE HANDLER pool is defined in `mpn` it 
  # also overrides the SERVER or dedicated pools, but its queue is not included
  # in the check.
  # A negative value disables the check.
  # @default -- 100
  serverPoolMaxQueue:
  # -- (int) Optional. Maximum number of threads allowed for the "ACCEPT"
  # internal pool, which is devoted to the parsing of the client requests.
  # This task does not include blocking operations; however, on multiprocessor
  # machines, allocating multiple threads for this task may be beneficial.
  # Only in corner cases, it is possible that some operations turn out to be
  # blocking; in particular:
  # - getHostName, only if banned hostnames are configured;
  # - socket close, only if banned hostnames are configured;
  # - read from the "proxy protocol", only if configured;
  # - service of requests on a "priority port", only available for internal use.
  # A zero value means a potentially unlimited number of threads.
  # @default -- the number of available total cores, as detected by the JVM,
  # which is also the minimum number of threads left in the pool
  acceptPoolMaxSize:
  #  -- (int) Optional. Maximum number of tasks allowed to be queued to enter
  #  the "ACCEPT" thread pool before undertaking backpressure actions.
  #  The setting only affects the listening sockets with
  #  `servers.{}.portType` configured as CREATE_ONLY. As long as the
  #  number is exceeded, the accept loops of these sockets will be kept
  #  waiting.
  #  By suspending the accept loop, some SYN packets from the clients may be
  #  discarded; the effect may vary depending on the backlog settings.
  #  Note that, in the absence of sockets configured as CREATE_ONLY, no
  #  backpressure action will take place.
  #  A long queue on the ACCEPT pool may be the consequence of a CPU shortage
  #  during (or caused by) a high client connection activity.
  #  A negative value disables the check.
  #  @default -- `-1`
  acceptPoolMaxQueue:
  # -- (int) Optional. Size of the "TLS-SSL HANDSHAKE" internal pool, which is
  # devoted to the management of operations needed to accomplish TLS/SSL
  # handshakes on the listening sockets specified through
  # the `servers.{}` configuration with `enableHttps` set to `true`.
  # In particular, this pool is only used when the socket is not configured to
  # request the client certificate (see servers.{}.sslConfig.enableClientAuth`
  # and `servers.{}.security.enableMandatoryClientAuth`); in this case, the
  # tasks are not expected to be blocking. Note that the operation may be
  # CPU-intensive; hence, it is advisable to set a value smaller than the
  # number of available cores.
  # @default -- half the number of available total cores, as detected by the JVM
  # (obviously, if there is only one core, the default will be 1)
  handshakePoolSize:
  # -- (int) Optional. Maximum number of tasks allowed to be queued to enter
  # the "TLS-SSL HANDSHAKE" thread pool before undertaking backpressure
  # actions.
  # The setting only regards the listening sockets specified through
  # the `servers.{}` configurations (with `enableHttps` set to `true`) that are
  # not configured to request the client certificate.
  # More precisely:
  # - If there are https sockets with `servers.{}.portType` configured as
  #   CREATE_ONLY, then, as long as the number is exceeded, the accept loops of
  #   these sockets will be kept waiting.
  #   By suspending the accept loop, some SYN packets from the clients may be
  #   discarded; the effect may vary depending on the backlog settings.
  # - Otherwise, if there are https sockets configured as CONTROL_ONLY and none
  #   is configured as the default GENERAL_PURPOSE, then, as long as the number
  #   is exceeded, the accept loops of these sockets will be kept waiting
  #   instead.
  #   Additionally, the same action on the accept loops associated to the
  #   `load.acceptPoolMaxQueue` check will be performed (regardless that
  #   `load.acceptPoolMaxQueue` itself is set). Note that the latter action may
  #    affect both http and https sockets.
  # Note that, in the absence of sockets configured as specified above, no
  # backpressure action will take place.
  # A negative value disables the check.
  # @default -- 100
  handshakePoolMaxQueue:
  # -- (int) Optional. Size of the "TLS-SSL AUTHENTICATION" internal pool,
  # which is used instead of the "TLS-SSL HANDSHAKE" pool for listening
  # sockets that are configured to request the client certificate. This kind of
  # task may exhibit a blocking behavior in some cases.
  # @default -- the same as configured for the SERVER thread pool
  httpsAuthPoolMaxSize:
  # -- (int) Optional. Maximum number of idle threads allowed for the
  # "TLS-SSL AUTHENTICATION" internal pool.
  # It behaves in the same way as the `load.serverPoolMaxFree` setting.
  # @default -- the same as configured for the SERVER thread pool
  httpsAuthPoolMaxFree:
  # -- (int) Optional. Maximum number of tasks allowed to be queued to enter
  # the "TLS-SSL AUTHENTICATION" thread pool before undertaking backpressure
  # actions.
  # The effect is similar to the more common `load.handShakePoolMaxQueue`, with
  # the difference that it regards listening sockets specified through
  # `server.httpsServer` that are configured to request the client certificate
  # (see `useClientAuth` and `forceClientAuth`).
  # A negative value disables the check.
  # @default -- 100
  httpsAuthPoolMaxQueue:
  # -- (int) Optional. Maximum number of sessions that can be left in
  # "prestarted" state, that is, waiting for the first bind or control
  # operation, before undertaking backpressure actions.
  # In particular, the same restrictive actions associated to the
  # `load.serverPoolMaxQueue` check will be performed (regardless that
  # `load.serverPoolMaxQueue` itself is set).
  # The setting is meant to be used in configurations which define a
  # CREATE_ONLY port in http and a CONTROL_ONLY port in https.
  # In these cases, and when a massive client reconnection is occurring, the
  # number of pending bind operations can grow so much that the needed TLS
  # handshakes can take arbitrarily long and cause the clients to time-out and
  # restart session establishment from scratch.
  # However, consider that the presence of many clients that don't perform
  # their bind in due time could keep other clients blocked.
  # Note that, if defined, the setting will also inhibit
  # `load.handshakePoolMaxQueue` and `load.httpsAuthPoolMaxQueue` from
  # affecting the accept loop of CONTROL_ONLY ports in https.
  # A negative value disables the check.
  # @default -- -1
  prestartedMaxQueue:
  # -- Optional. Policy to be adopted in order to manage the extraction of the
  # field values from the item events and their conversion to
  # If set to `true`, causes field conversion to be performed before the events
  # are dispatched to the various sessions; this may lead to some wasted
  # conversions, in case an event is filtered out later by all interested
  # clients or in case a field is not subscribed to by any client. Note that
  # events which don't provide an iterator (see the Data Adapter interface
  # documentation) cannot be managed in this way.
  # If set to `false`, causes field conversion to be performed only as soon as
  # it is needed; in this case, as the same event object may be shared by many
  # sessions, some synchronization logic is needed and this may lead to poor
  # scaling in case many clients subscribe to the same item.
  # @default -- true
  forceEarlyConversions:

# -- Optional. Connectors configuration.
connectors:
  # -- Optional. Lightstreamer Kafka Connector configuration.
  kafkaConnector:
    # -- Optional. Enablement of the Lightstreamer Kafka Connector.
    # @default -- false
    enabled: false
    # -- Mandatory. The Lightstreamer Kafka Connector version to install.
    version: "1.2.0"
    # -- Mandatory. Define the Kafka Connector Adapter Set and its unique ID.
    adapterSetId: "KafkaConnector"
    # -- (string) Mandatory. Java class name of the Kafka Connector Metadata
    # Adapter. It is possible to provide a custom implementation by extending
    # the factory class.
    # See https://github.com/Lightstreamer/Lightstreamer-kafka-connector/tree/main?tab=readme-ov-file#customize-the-kafkaconnector-metadata-adapter-class
    adapterClassName: "com.lightstreamer.kafka.adapters.pub.KafkaConnectorMetadataAdapter"
    # -- Mandatory. Kafka Connector global Logging configuration.
    logging:
      # -- Mandatory. Appenders configuration.
      # Every logger must refer to one or more appenders defined here.
      appenders:
        # -- At least one must be provided. An appender configuration.
        stdout:
          # -- (string) Mandatory. The appender type.
          # Currently, only the `Console` type is supported.
          type: Console
          # -- (string) Mandatory. The appender layout.
          pattern: "[%d] [%-10c{1}] %-5p %m%n"
      # -- Optional. Global loggers configuration.
      loggers:
        # -- The logger name
        org.apache.kafka:
          # -- Mandatory. List of references to the appenders to be used by
          # the logger.
          appenders:
            - stdout
          # -- (string) Mandatory. The logger level.
          level: WARN
        # -- Logger for the Kafka Connector Metadata Adapter.
        # Replace the name with the one of the custom Metadata Adapter class.
        com.lightstreamer.kafka.adapters.pub.KafkaConnectorMetadataAdapter:
          appenders:
            - stdout
          level: INFO
        # Put here other loggers as needed.
        # my.package:
        #  appenders:
        #    - stdout
        #  level: INFO
    # -- Mandatory. Connection configurations.
    connections:
      # -- At least one must be provided. Connection configuration.
      # The Kafka Connector allows the configuration of different independent
      # connections to different Kafka broker/clusters.
      # Since the Kafka Connector manages the physical connection to Kafka by
      # wrapping an internal Kafka Consumer, several configuration settings are
      # identical to those required by the usual Kafka Consumer configuration.
      quickStart:
        # -- (string) Mandatory and unique across all configurations. The
        # connection name.
        # This value will be used by the Clients to request real-time data from
        # this specific Kafka connection through a Subscription object.
        # The connection name is also used to group all logging messages
        # belonging to the same connection.
        name: "K8S-QuickStart"
        # -- Enablement of the connection.
        # If set to `false`, the Lightstreamer Server will automatically deny
        # every subscription made to the connection.
        # @default -- true
        enabled: true
        # -- (string) Mandatory. The Kafka Cluster bootstrap server endpoint
        # expressed as the list of host/port pairs used to establish the
        # initial connect.
        bootstrapServers: broker:9092
        # -- (string) Optional. The name of the consumer group this connection
        # belongs to.
        # Sets the value for the "group.id" key used to configure the internal
        # Kafka Consumer.
        # See https://kafka.apache.org/documentation/#consumerconfigs_group.id
        # for details.
        # @default -- kafkaConnector.adapterSetId + name + randomly generated
        # suffix.
        groupId: quickstart
        # -- Optional. TLS/SSL settings for the connection.
        # @default -- all settings at their defaults
        sslConfig:
          # -- Optional. Enablement of the encryption.
          # @default -- false
          enabled: true
          # -- (string) Optional. The SSL protocol to be used. Can be one of
          # the following: `TLSv1.2`,  `TLSv1.3`.
          # @default -- TLSv1.3 when running on Java 11 or newer, TLSv1.2
          # otherwise
          protocol:
          # -- Optional. List of enabled secure communication protocols
          # @default -- [TLSv1.2, TLSv1.3] when running on Java 11 or newer,
          # TLSv1.2 otherwise.
          allowedProtocols: []
          # -- Optional. List of enabled secure cipher suites.
          # @default -- all the available cipher suites in the running JVM
          allowedCipherSuites: []
          # -- Optional. Enablement of the hostname verification.
          # @default -- false
          enableHostnameVerification:
          # -- Optional. The reference to a keystore used to validate the
          # certificates provided by the Kafka brokers.
          # See the `keyStores.myKafkaConnectorKeystore` settings for general
          # details on keystore configuration for the Kafka Connector.
          trustStoreRef:
          # -- Optional. The reference to a keystore used if mutual TLS is enabled
          # on Kafka brokers.
          # See the `keyStores.myKafkaConnectorKeystore` settings for general
          # details on keystore configuration for the Kafka Connector.
          keyStoreRef:
        # -- Optional. Authentication settings for the connection.
        authentication:
            # -- Optional. Enablement of the authentication of the connection
            # against the Kafka Cluster.
            # @default -- false
            enabled: false
            # (string) Mandatory if `enabled` is set to `true`. The SASL
            # mechanism type.
            # The Kafka Connector accepts the following authentication
            # mechanisms:
            #  - PLAIN
            #  - SCRAM-SHA-256
            #  - SCRAM-SHA-512
            #  - GSSAPI
            # @default -- PLAIN

            # -- Mandatory if `mechanism` is set to `PLAIN`, `SCRAM-SHA-256`,
            # `SCRAM-SHA-512`. The name of the secret containing the
            # credentials. The secret must contain the keys `user` and `password`.
            credentialsSecretRef:
            # -- Mandatory if `mechanism` is set to `GSSAPI`. The GSSAPI
            # authentication settings.
            gssapi:
              # -- Optional. Enablement of the use of a keytab.
              # @default -- false
              enableKeytab:
              # -- Mandatory if `enableKeytab` is set to `true`. The configmap
              # name and key where the the keytab file is stored
              keytabFilePathRef:
                # name:
                # key: my-keytab
              # -- Optional. Enablement of the storage of the principal key.
              # @default -- false
              enableStoreKey:
              # -- (string) Mandatory. The name of the Kerberos service.
              kerberosServiceName:
              # -- (string) Mandatory if enableTicketCache is set to `true`.
              # The name of the principal to be used.
              principal:
              # -- Optional. Enablement of the use of a ticket cache.
              # @default -- false
              enableTicketCache:
        # -- Optional. Record evaluation settings.
        # @default -- all settings at their defaults
        record:
          # -- (string) Optional. Specifies where to start consuming events
          # from:
          # - `LATEST`: start consuming events from the end of the topic partition
          # - `EARLIEST`: start consuming events from the beginning of the topic partition
          # Sets the value of the `auto.offset.reset` key to configure the
          # internal Kafka Consumer.
          # @default -- LATEST
          consumeFrom: EARLIEST
          # -- (int) Optional. The number of threads to be used for concurrent
          # processing of the incoming deserialized records. If set to `-1`,
          # the number of threads will be automatically determined based on the
          # number of available CPU cores.
          # @default -- 1
          consumeWithThreadNumber:
          # -- (string) Optional, but effective only if
          # `consumeWithThreadNumber` is set to a value greater than 1 (which
          # includes the default value). The order strategy to be used for
          # concurrent processing of the incoming deserialized records.
          # If set to `ORDER_BY_PARTITION`, maintain the order of records
          # within each partition.
          # If set to `ORDER_BY_KEY`, maintain the order among the records
          # sharing the same key.
          # If set to `UNORDERED`, provide no ordering guarantees.
          # @default -- ORDER_BY_PARTITION
          consumeWithOrderStrategy:
          # -- Optional. Key evaluator configuration.
          # @default -- all settings at their defaults
          keyEvaluator:
            # -- (string) Optional. The format to be used to deserialize the
            # key of a Kafka record. Can be one of the following:
            # - AVRO
            # - JSON
            # - STRING
            # - INTEGER
            # - BOOLEAN
            # - BYTE_ARRAY
            # - BYTE_BUFFER
            # - BYTES
            # - DOUBLE
            # - FLOAT
            # - LONG
            # - SHORT
            # - UUID
            # @default -- STRING
            type: INTEGER
            # -- Mandatory if `type` is set to `AVRO` and
            # `enableSchemaRegistry` is set to `false`. The configmap name and
            # key where the local schema for message validation of the key is
            # stored. The setting takes precedence over `enableSchemaRegistry`
            # if the latter is set to `true`.
            localSchemaFilePathRef:
            # -- Enablement of the Confluent Schema Registry for  validation of
            # the key.
            # Must be set to `true` when `keyEvaluator.type` is set to `AVRO`
            # and no local schema are specified.
            # @default -- false
            enableSchemaRegistry:
          # -- Optional. Value evaluator configuration.
          # @default -- all settings at their defaults
          valueEvaluator:
            # -- (string) Optional. The format to be used to deserialize the
            # value of a Kafka record. See `record.keyEvaluator.type` for the
            # list of supported formats.
            # @default -- STRING
            type: JSON
            # -- Mandatory if `type` is set to `AVRO` and
            # `enableSchemaRegistry` is set to `false`. The configmap name and
            # key where the local schema for message validation of the value is
            # stored. The setting takes precedence over `enableSchemaRegistry`
            # if the latter is set to `true`.
            localSchemaFilePathRef:
            # -- Enablement of the Confluent Schema Registry for validation of
            # the value.
            # Must be set to `true` when `valueEvaluator.type` is set to `AVRO`
            # and no local schema are specified.
            # @default -- false
            enableSchemaRegistry:
          # -- Optional. The error handling strategy to be used if an error
          # occurs while extracting data from incoming deserialized records.
          # If set to `IGNORE_AND_CONTINUE`, the error is ignored and the
          # processing of the record continues.
          # If set to `FORCE_UNSUBSCRIPTION`, the processing of the record is
          # stopped and the unsubscription of the items requested by all the
          # Lightstreamer clients subscribed to this connection is forced.
          # @default -- IGNORE_AND_CONTINUE
          extractionErrorStrategy:
          # -- Optional. The reference to Schema Registry configuration defined
          # in `connectors.kafkaConnector.schemaRegistry`.
          schemaRegistryRef:
        # -- Mandatory. Record routings configuration.
        routing:
          # -- Optional. Maps of item template expressions.
          # An expressions is made of:
          # - ITEM_PREFIX: the prefix of the item name
          # - BINDABLE_EXPRESSIONS: a sequence of bindable extraction expressions.
          # See https://lightstreamer.com/api/ls-kafka-connector/latest/ls-kafka-connector/record-extraction.html
          # @default -- {}
          itemTemplates:
            stockTemplate: stock-#{index=KEY}
          # -- Mandatory. Kafka topic mappings.
          topicMappings:
            # -- At least one must be provided. A Kafka topic mappings.
            # Map a Kafka topic to:
            # - one or more simple items
            # - one or more item templates
            # - any combination of the above
            #
            # Examples:
            #
            # topicMappingSample1:
            #   topic: "aTopicName"
            #   items:
            #     - "item1"
            #     - "item2"
            #     - "itemN"
            #
            # topicMappingSample2:
            #   topic: "anotherTopicName"
            #   itemTemplateRefs:
            #     - "itemTemplate1"
            #     - "itemTemplate2"
            #     - "itemTemplateN"
            #
            # topicMappingSample3
            #   topic: "yetAnotherTopicName"
            #   items:
            #     - "item1"
            #     - "item2"
            #     - "itemN"
            #   itemTemplateRefs:
            #     - "itemTemplate1"
            #     - "itemTemplate2"
            #     - "itemTemplateN"
            stock:
              # -- Mandatory and unique across all topic mappings. The Kafka
              # topic name.
              topic: stock
              # -- Mandatory if `itemTemplateRefs` is empty. List of simple
              # items to which the topic must be mapped.
              # @default -- []
              items: []
                # - item1
                # - item2
                # - item3
              # -- Mandatory if `items` is empty. List of item template to
              # which the topic must be mapped.
              # @default -- []
              itemTemplateRefs:
                - stockTemplate
          # -- Optional. Enable
          # `connectors.kafkaConnector.routing.topicMappings.{}.topic` to be
          # treated as a regular expression rather than of a literal topic
          # name.
          # @default -- false
          enableTopicRegEx:
        # -- Mandatory. Record mappings configuration.
        fields:
          # Mandatory. Record data to Lightstreamer field mappings.
          mappings:
            # -- At least one must be provided. A field mapping.
            # Map the value extracted through the "#{extraction_expression}" to
            # the Lightstreamer field name specified by key.
            # The expression is written in the Data Extraction Language. See
            # documentation at:
            # https://github.com/lightstreamer/Lightstreamer-kafka-connector?tab=readme-ov-file#record-mapping-fieldfield_name
            timestamp: "#{VALUE.timestamp}"
            time: "#{VALUE.time}"
            stock_name: "#{VALUE.name}"
            last_price: "#{VALUE.last_price}"
            ask: "#{VALUE.ask}"
            ask_quantity: "#{VALUE.ask_quantity}"
            bid: "#{VALUE.bid}"
            bid_quantity: "#{VALUE.bid_quantity}"
            pct_change: "#{VALUE.pct_change}"
            min: "#{VALUE.min}"
            max: "#{VALUE.max}"
            ref_price: "#{VALUE.ref_price}"
            open_price: "#{VALUE.open_price}"
            item_status: "#{VALUE.item_status}"
            ts: "#{TIMESTAMP}"
            topic: "#{TOPIC}"
            offset: "#{OFFSET}"
            partition: "#{PARTITION}"
          # -- Optional. If set to `true`, if a field mapping fails, that
          # specific field's value will simply be omitted from the update sent
          # to the Lightstreamer clients, while other successfully mapped fields
          # from the same record will still be delivered. Can be one of the
          # @default -- false
          enableSkipFailedMapping:
        # -- Optional. Logger configuration for the connection.
        logger:
          # -- Mandatory. List of references to the appenders defined in
          # `kafkaConnector.logging.appenders`.
          appenders:
            - stdout
          # -- (string) Mandatory. The logger level.
          level: INFO
    # -- Optional. Local schema files used for message validation.
    localSchemaFiles:
      # -- Optional. The configmap name and key where the local schema file
      # is stored.
      myKeySchema:
        # name: record-key
        # key: record_key.avsc
      myValueSchema:
        # name: record-value
        # key: record_value.avsc

    # -- Optional. Set of Schema Registry configurations.
    schemaRegistry:
      # -- Mandatory if either `connections.{}.keyEvaluator.type` or is
      # `connections.{}.valueEvaluator.type` set to `AVRO` and no local schema
      # paths are specified. Schema Registry configuration.
      mySchemaRegistry:
        # -- Mandatory. The URL of the Confluent Schema Registry. An encrypted
        # connection is enabled by specifying the "https" protocol.
        url: https://schema-registry:8084
        # -- Optional. Basic HTTP authentication of a connection against the
        # Schema Registry.
        basicAuthentication:
          # -- Optional. Enablement of the Basic HTTP authentication.
          # @default -- false
          enabled:
          # -- Mandatory if `enable` is set to `true`. The name of the secret
          # containing the credentials.
          # The secret must contain the keys `user` and `password`.
          credentialsSecretRef:
        # -- Mandatory if the https protocol is specified in `url`. TLS/SSL
        # settings.
        sslConfig:
          # -- Optional. List of enabled secure communication protocols
          # @default -- [TLSv1.2, TLSv1.3] when running on Java 11 or newer,
          # TLSv1.2 otherwise.
          allowProtocols: []
            # - TLSv1.2
            # - TLSv1.3
          # -- Optional. List of enabled secure cipher suites.
          # @default -- all the available cipher suites in the running JVM
          allowCipherSuites: []
          # - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
          # -- Optional. Enablement of the hostname verification.
          # @default -- false
          enableHostnameVerification:
          # -- Optional. The reference to a keystore used to validate the
          # certificates provided by the Schema Registry.
          # See the `keyStores.myKafkaConnectorKeystore` settings for general
          # details on keystore configuration for the Kafka Connector.
          trustStoreRef:
          # -- Optional. The reference to a keystore used if mutual TLS is enabled
          # on the Schema Registry.
          # See the `keyStores.myKafkaConnectorKeystore` settings for general
          # details on keystore configuration for the Kafka Connector.
          keyStoreRef:
